"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import bosdyn.api.geometry_pb2
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class Camera(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class PinholeIntrinsics(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        FOCAL_LENGTH_FIELD_NUMBER: builtins.int
        CENTER_POINT_FIELD_NUMBER: builtins.int
        K1_FIELD_NUMBER: builtins.int
        K2_FIELD_NUMBER: builtins.int
        K3_FIELD_NUMBER: builtins.int
        K4_FIELD_NUMBER: builtins.int
        @property
        def focal_length(self) -> bosdyn.api.geometry_pb2.Vec2:
            """Focal_length in pixels"""
            pass
        @property
        def center_point(self) -> bosdyn.api.geometry_pb2.Vec2:
            """Center point in pixels"""
            pass
        k1: builtins.float
        """The following 4 parameters are radial distortion coefficeints to 4 orders.
        See: https://en.wikipedia.org/wiki/Distortion_(optics)#Software_correction
        If all 4 of these values are 0, do not apply any correction.
        """

        k2: builtins.float
        k3: builtins.float
        k4: builtins.float
        def __init__(self,
            *,
            focal_length: typing.Optional[bosdyn.api.geometry_pb2.Vec2] = ...,
            center_point: typing.Optional[bosdyn.api.geometry_pb2.Vec2] = ...,
            k1: builtins.float = ...,
            k2: builtins.float = ...,
            k3: builtins.float = ...,
            k4: builtins.float = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["center_point",b"center_point","focal_length",b"focal_length"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["center_point",b"center_point","focal_length",b"focal_length","k1",b"k1","k2",b"k2","k3",b"k3","k4",b"k4"]) -> None: ...

    class SphericalLimits(google.protobuf.message.Message):
        """Spherical limits are the minimum and maximum angle of the image.
        IE the upper left pixel is at min_angle.x, min_angle.y
        and the lower right pixel is at max_angle.x, max_angle.y
        for a full-FOV image this will be (-180, 90) and (180, -90)
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        MIN_ANGLE_FIELD_NUMBER: builtins.int
        MAX_ANGLE_FIELD_NUMBER: builtins.int
        @property
        def min_angle(self) -> bosdyn.api.geometry_pb2.Vec2: ...
        @property
        def max_angle(self) -> bosdyn.api.geometry_pb2.Vec2: ...
        def __init__(self,
            *,
            min_angle: typing.Optional[bosdyn.api.geometry_pb2.Vec2] = ...,
            max_angle: typing.Optional[bosdyn.api.geometry_pb2.Vec2] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["max_angle",b"max_angle","min_angle",b"min_angle"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["max_angle",b"max_angle","min_angle",b"min_angle"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    RESOLUTION_FIELD_NUMBER: builtins.int
    BASE_FRAME_NAME_FIELD_NUMBER: builtins.int
    BASE_TFROM_SENSOR_FIELD_NUMBER: builtins.int
    BASE_TFORM_SENSOR_FIELD_NUMBER: builtins.int
    PINHOLE_FIELD_NUMBER: builtins.int
    SPHERICAL_FIELD_NUMBER: builtins.int
    name: typing.Text
    """Identifier for the camera."""

    @property
    def resolution(self) -> bosdyn.api.geometry_pb2.Vec2:
        """Resolution of the sensor, where x = width and y = height."""
        pass
    base_frame_name: typing.Text
    """The frame name for the parent frame of this camera. This frame will show up in the FrameTreeSnapshot
    grabbed from the payload registration service.
    """

    @property
    def base_tfrom_sensor(self) -> bosdyn.api.geometry_pb2.SE3Pose:
        """'base_tfrom_sensor' defines the transform from the specific camera to the named base from.
        This is deprecated in favor of 'base_tform_sensor' which follows the intended naming convention
        and FrameTree directionality convention of the Spot system as defined in geometry.proto.
        """
        pass
    @property
    def base_tform_sensor(self) -> bosdyn.api.geometry_pb2.SE3Pose:
        """The transform from the named base frame to this specific camera"""
        pass
    @property
    def pinhole(self) -> global___Camera.PinholeIntrinsics:
        """Physical cameras"""
        pass
    @property
    def spherical(self) -> global___Camera.SphericalLimits:
        """Only synthetic spherical panoramas"""
        pass
    def __init__(self,
        *,
        name: typing.Text = ...,
        resolution: typing.Optional[bosdyn.api.geometry_pb2.Vec2] = ...,
        base_frame_name: typing.Text = ...,
        base_tfrom_sensor: typing.Optional[bosdyn.api.geometry_pb2.SE3Pose] = ...,
        base_tform_sensor: typing.Optional[bosdyn.api.geometry_pb2.SE3Pose] = ...,
        pinhole: typing.Optional[global___Camera.PinholeIntrinsics] = ...,
        spherical: typing.Optional[global___Camera.SphericalLimits] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["base_tform_sensor",b"base_tform_sensor","base_tfrom_sensor",b"base_tfrom_sensor","intrinsics",b"intrinsics","pinhole",b"pinhole","resolution",b"resolution","spherical",b"spherical"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["base_frame_name",b"base_frame_name","base_tform_sensor",b"base_tform_sensor","base_tfrom_sensor",b"base_tfrom_sensor","intrinsics",b"intrinsics","name",b"name","pinhole",b"pinhole","resolution",b"resolution","spherical",b"spherical"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["intrinsics",b"intrinsics"]) -> typing.Optional[typing_extensions.Literal["pinhole","spherical"]]: ...
global___Camera = Camera
