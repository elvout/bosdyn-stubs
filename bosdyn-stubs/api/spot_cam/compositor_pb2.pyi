"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import bosdyn.api.header_pb2
import bosdyn.api.spot_cam.camera_pb2
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.wrappers_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class ScreenDescription(google.protobuf.message.Message):
    """A "Screen" represents a particular layout of camera images
    used by the video stream.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    name: typing.Text
    """Unique identifer for a screen."""

    def __init__(self,
        *,
        name: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name"]) -> None: ...
global___ScreenDescription = ScreenDescription

class GetScreenRequest(google.protobuf.message.Message):
    """Request the current screen in use."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    HEADER_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> bosdyn.api.header_pb2.RequestHeader:
        """Common request header."""
        pass
    def __init__(self,
        *,
        header: typing.Optional[bosdyn.api.header_pb2.RequestHeader] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["header",b"header"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["header",b"header"]) -> None: ...
global___GetScreenRequest = GetScreenRequest

class GetScreenResponse(google.protobuf.message.Message):
    """Specify which screen is currently being displayed in the video stream."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    HEADER_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> bosdyn.api.header_pb2.ResponseHeader:
        """Common response header."""
        pass
    name: typing.Text
    """Identifier of the current screen."""

    def __init__(self,
        *,
        header: typing.Optional[bosdyn.api.header_pb2.ResponseHeader] = ...,
        name: typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["header",b"header"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["header",b"header","name",b"name"]) -> None: ...
global___GetScreenResponse = GetScreenResponse

class GetVisibleCamerasRequest(google.protobuf.message.Message):
    """Request information about the current cameras in the video stream."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    HEADER_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> bosdyn.api.header_pb2.RequestHeader:
        """Common request header."""
        pass
    def __init__(self,
        *,
        header: typing.Optional[bosdyn.api.header_pb2.RequestHeader] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["header",b"header"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["header",b"header"]) -> None: ...
global___GetVisibleCamerasRequest = GetVisibleCamerasRequest

class GetVisibleCamerasResponse(google.protobuf.message.Message):
    """Description of the parameters and locations of each camera in the
    current video stream.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class Stream(google.protobuf.message.Message):
        """The location and camera parameters for a single camera."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        class Window(google.protobuf.message.Message):
            """The location of a sub-image within a larger image."""
            DESCRIPTOR: google.protobuf.descriptor.Descriptor
            XOFFSET_FIELD_NUMBER: builtins.int
            YOFFSET_FIELD_NUMBER: builtins.int
            WIDTH_FIELD_NUMBER: builtins.int
            HEIGHT_FIELD_NUMBER: builtins.int
            xoffset: builtins.int
            yoffset: builtins.int
            width: builtins.int
            """The image should be cropped out of the stream at this
            resolution, and then scaled to the resolution described
            in the 'camera' member, below.  once that scaling takes
            place, the intrinsics will be valid.
            """

            height: builtins.int
            def __init__(self,
                *,
                xoffset: builtins.int = ...,
                yoffset: builtins.int = ...,
                width: builtins.int = ...,
                height: builtins.int = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["height",b"height","width",b"width","xoffset",b"xoffset","yoffset",b"yoffset"]) -> None: ...

        WINDOW_FIELD_NUMBER: builtins.int
        CAMERA_FIELD_NUMBER: builtins.int
        @property
        def window(self) -> global___GetVisibleCamerasResponse.Stream.Window:
            """The location of this camera stream within the larger stream."""
            pass
        @property
        def camera(self) -> bosdyn.api.spot_cam.camera_pb2.Camera:
            """The name field in this camera member is of the form 'c:w',
            where c is the name of the camera and w is the name of the
            window that's projecting it.
            """
            pass
        def __init__(self,
            *,
            window: typing.Optional[global___GetVisibleCamerasResponse.Stream.Window] = ...,
            camera: typing.Optional[bosdyn.api.spot_cam.camera_pb2.Camera] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["camera",b"camera","window",b"window"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["camera",b"camera","window",b"window"]) -> None: ...

    HEADER_FIELD_NUMBER: builtins.int
    STREAMS_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> bosdyn.api.header_pb2.ResponseHeader:
        """Common response header."""
        pass
    @property
    def streams(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___GetVisibleCamerasResponse.Stream]:
        """List of all camera streams visible in the current video stream."""
        pass
    def __init__(self,
        *,
        header: typing.Optional[bosdyn.api.header_pb2.ResponseHeader] = ...,
        streams: typing.Optional[typing.Iterable[global___GetVisibleCamerasResponse.Stream]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["header",b"header"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["header",b"header","streams",b"streams"]) -> None: ...
global___GetVisibleCamerasResponse = GetVisibleCamerasResponse

class ListScreensRequest(google.protobuf.message.Message):
    """Request the different screen layouts available."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    HEADER_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> bosdyn.api.header_pb2.RequestHeader:
        """Common request header."""
        pass
    def __init__(self,
        *,
        header: typing.Optional[bosdyn.api.header_pb2.RequestHeader] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["header",b"header"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["header",b"header"]) -> None: ...
global___ListScreensRequest = ListScreensRequest

class ListScreensResponse(google.protobuf.message.Message):
    """Response with all screen layouts available."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    HEADER_FIELD_NUMBER: builtins.int
    SCREENS_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> bosdyn.api.header_pb2.ResponseHeader:
        """Common response header."""
        pass
    @property
    def screens(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ScreenDescription]:
        """List of all screen layouts that can be selected."""
        pass
    def __init__(self,
        *,
        header: typing.Optional[bosdyn.api.header_pb2.ResponseHeader] = ...,
        screens: typing.Optional[typing.Iterable[global___ScreenDescription]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["header",b"header"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["header",b"header","screens",b"screens"]) -> None: ...
global___ListScreensResponse = ListScreensResponse

class SetScreenRequest(google.protobuf.message.Message):
    """Switch the camera layout in the video stream to the one specified."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    HEADER_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> bosdyn.api.header_pb2.RequestHeader:
        """Common request header."""
        pass
    name: typing.Text
    """Identifier as specified in ListScreensResponse."""

    def __init__(self,
        *,
        header: typing.Optional[bosdyn.api.header_pb2.RequestHeader] = ...,
        name: typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["header",b"header"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["header",b"header","name",b"name"]) -> None: ...
global___SetScreenRequest = SetScreenRequest

class SetScreenResponse(google.protobuf.message.Message):
    """Result of setting the camera layout."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    HEADER_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> bosdyn.api.header_pb2.ResponseHeader:
        """Common response header."""
        pass
    name: typing.Text
    """Identifier of the screen used."""

    def __init__(self,
        *,
        header: typing.Optional[bosdyn.api.header_pb2.ResponseHeader] = ...,
        name: typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["header",b"header"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["header",b"header","name",b"name"]) -> None: ...
global___SetScreenResponse = SetScreenResponse

class IrColorMap(google.protobuf.message.Message):
    """the colormap is a mapping of radiometric data to color, to make the images easier for people to look at in real time."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class _ColorMap:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _ColorMapEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[IrColorMap._ColorMap.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        COLORMAP_UNKNOWN: IrColorMap._ColorMap.ValueType  # 0
        COLORMAP_GREYSCALE: IrColorMap._ColorMap.ValueType  # 1
        """the greyscale colormap maps the minimum value (defined below) to black and the maximum value (defined below) to white"""

        COLORMAP_JET: IrColorMap._ColorMap.ValueType  # 2
        """the jet colormap uses blues for values closer to the minimum, and red values for values closer to the maximum."""

        COLORMAP_INFERNO: IrColorMap._ColorMap.ValueType  # 3
        """the inferno colormap maps the minimum value to black and the maximum value to light yellow RGB(252, 252, 164). It is also
        easier to view by those with color blindness
        """

        COLORMAP_TURBO: IrColorMap._ColorMap.ValueType  # 4
        """the turbo colormap uses blues for values closer to the minumum, red values for values closer to the maximum,
        and addresses some short comings of the jet color map such as false detail, banding and color blindness
        """

    class ColorMap(_ColorMap, metaclass=_ColorMapEnumTypeWrapper):
        pass

    COLORMAP_UNKNOWN: IrColorMap.ColorMap.ValueType  # 0
    COLORMAP_GREYSCALE: IrColorMap.ColorMap.ValueType  # 1
    """the greyscale colormap maps the minimum value (defined below) to black and the maximum value (defined below) to white"""

    COLORMAP_JET: IrColorMap.ColorMap.ValueType  # 2
    """the jet colormap uses blues for values closer to the minimum, and red values for values closer to the maximum."""

    COLORMAP_INFERNO: IrColorMap.ColorMap.ValueType  # 3
    """the inferno colormap maps the minimum value to black and the maximum value to light yellow RGB(252, 252, 164). It is also
    easier to view by those with color blindness
    """

    COLORMAP_TURBO: IrColorMap.ColorMap.ValueType  # 4
    """the turbo colormap uses blues for values closer to the minumum, red values for values closer to the maximum,
    and addresses some short comings of the jet color map such as false detail, banding and color blindness
    """


    class ScalingPair(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        MIN_FIELD_NUMBER: builtins.int
        MAX_FIELD_NUMBER: builtins.int
        min: builtins.float
        """the minimum value to do color mapping, in degrees Celsius"""

        max: builtins.float
        """the maximum value to do color mapping, in degrees Celsius"""

        def __init__(self,
            *,
            min: builtins.float = ...,
            max: builtins.float = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["max",b"max","min",b"min"]) -> None: ...

    COLORMAP_FIELD_NUMBER: builtins.int
    SCALE_FIELD_NUMBER: builtins.int
    AUTO_SCALE_FIELD_NUMBER: builtins.int
    colormap: global___IrColorMap.ColorMap.ValueType
    @property
    def scale(self) -> global___IrColorMap.ScalingPair: ...
    @property
    def auto_scale(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """if auto_scale is true, then the min and max values are derived from the data itself, and the settings
        above are ignored
        """
        pass
    def __init__(self,
        *,
        colormap: global___IrColorMap.ColorMap.ValueType = ...,
        scale: typing.Optional[global___IrColorMap.ScalingPair] = ...,
        auto_scale: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["auto_scale",b"auto_scale","scale",b"scale"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["auto_scale",b"auto_scale","colormap",b"colormap","scale",b"scale"]) -> None: ...
global___IrColorMap = IrColorMap

class SetIrColormapRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    HEADER_FIELD_NUMBER: builtins.int
    MAP_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> bosdyn.api.header_pb2.RequestHeader: ...
    @property
    def map(self) -> global___IrColorMap: ...
    def __init__(self,
        *,
        header: typing.Optional[bosdyn.api.header_pb2.RequestHeader] = ...,
        map: typing.Optional[global___IrColorMap] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["header",b"header","map",b"map"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["header",b"header","map",b"map"]) -> None: ...
global___SetIrColormapRequest = SetIrColormapRequest

class SetIrColormapResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    HEADER_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> bosdyn.api.header_pb2.ResponseHeader: ...
    def __init__(self,
        *,
        header: typing.Optional[bosdyn.api.header_pb2.ResponseHeader] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["header",b"header"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["header",b"header"]) -> None: ...
global___SetIrColormapResponse = SetIrColormapResponse

class GetIrColormapRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    HEADER_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> bosdyn.api.header_pb2.RequestHeader: ...
    def __init__(self,
        *,
        header: typing.Optional[bosdyn.api.header_pb2.RequestHeader] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["header",b"header"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["header",b"header"]) -> None: ...
global___GetIrColormapRequest = GetIrColormapRequest

class GetIrColormapResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    HEADER_FIELD_NUMBER: builtins.int
    MAP_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> bosdyn.api.header_pb2.ResponseHeader: ...
    @property
    def map(self) -> global___IrColorMap: ...
    def __init__(self,
        *,
        header: typing.Optional[bosdyn.api.header_pb2.ResponseHeader] = ...,
        map: typing.Optional[global___IrColorMap] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["header",b"header","map",b"map"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["header",b"header","map",b"map"]) -> None: ...
global___GetIrColormapResponse = GetIrColormapResponse

class IrMeterOverlay(google.protobuf.message.Message):
    """the ir meter overlay allows for pixel-accurate measurements to be taken and displayed to the user"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class NormalizedCoordinates(google.protobuf.message.Message):
        """these coordinates, normalized from 0-1, are within the ir camera 'window'
        note: if the coordinates lie within an 'invalid' region of the window, then
        the meter will be disabled.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        X_FIELD_NUMBER: builtins.int
        Y_FIELD_NUMBER: builtins.int
        x: builtins.float
        y: builtins.float
        def __init__(self,
            *,
            x: builtins.float = ...,
            y: builtins.float = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["x",b"x","y",b"y"]) -> None: ...

    ENABLE_FIELD_NUMBER: builtins.int
    COORDS_FIELD_NUMBER: builtins.int
    enable: builtins.bool
    """If enable isn't true, don't overlay any IR meter"""

    @property
    def coords(self) -> global___IrMeterOverlay.NormalizedCoordinates: ...
    def __init__(self,
        *,
        enable: builtins.bool = ...,
        coords: typing.Optional[global___IrMeterOverlay.NormalizedCoordinates] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["coords",b"coords"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["coords",b"coords","enable",b"enable"]) -> None: ...
global___IrMeterOverlay = IrMeterOverlay

class SetIrMeterOverlayRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    HEADER_FIELD_NUMBER: builtins.int
    OVERLAY_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> bosdyn.api.header_pb2.RequestHeader: ...
    @property
    def overlay(self) -> global___IrMeterOverlay: ...
    def __init__(self,
        *,
        header: typing.Optional[bosdyn.api.header_pb2.RequestHeader] = ...,
        overlay: typing.Optional[global___IrMeterOverlay] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["header",b"header","overlay",b"overlay"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["header",b"header","overlay",b"overlay"]) -> None: ...
global___SetIrMeterOverlayRequest = SetIrMeterOverlayRequest

class SetIrMeterOverlayResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    HEADER_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> bosdyn.api.header_pb2.ResponseHeader: ...
    def __init__(self,
        *,
        header: typing.Optional[bosdyn.api.header_pb2.ResponseHeader] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["header",b"header"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["header",b"header"]) -> None: ...
global___SetIrMeterOverlayResponse = SetIrMeterOverlayResponse
