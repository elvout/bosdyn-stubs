"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import bosdyn.api.geometry_pb2
import bosdyn.api.trajectory_pb2
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.wrappers_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _LocomotionHint:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _LocomotionHintEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_LocomotionHint.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    HINT_UNKNOWN: _LocomotionHint.ValueType  # 0
    """Invalid; do not use."""

    HINT_AUTO: _LocomotionHint.ValueType  # 1
    """No hint, robot chooses an appropriate gait (typically trot.)"""

    HINT_TROT: _LocomotionHint.ValueType  # 2
    """Most robust gait which moves diagonal legs together."""

    HINT_SPEED_SELECT_TROT: _LocomotionHint.ValueType  # 3
    """Trot which comes to a stand when not commanded to move."""

    HINT_CRAWL: _LocomotionHint.ValueType  # 4
    """Slow and steady gait which moves only one foot at a time."""

    HINT_SPEED_SELECT_CRAWL: _LocomotionHint.ValueType  # 10
    """Crawl which comes to a stand when not commanded to move."""

    HINT_AMBLE: _LocomotionHint.ValueType  # 5
    """Four beat gait where one foot touches down at a time."""

    HINT_SPEED_SELECT_AMBLE: _LocomotionHint.ValueType  # 6
    """Amble which comes to a stand when not commanded to move."""

    HINT_JOG: _LocomotionHint.ValueType  # 7
    """Demo gait which moves diagonal leg pairs together with an aerial phase."""

    HINT_HOP: _LocomotionHint.ValueType  # 8
    """Demo gait which hops while holding some feet in the air."""

    HINT_AUTO_TROT: _LocomotionHint.ValueType  # 3
    """HINT_AUTO_TROT is deprecated due to the name being too similar to the Spot Autowalk feature.
    It has been replaced by HINT_SPEED_SELECT_TROT. Keeping this value in here for now for backwards
    compatibility, but this may be removed in future releases.
    """

    HINT_AUTO_AMBLE: _LocomotionHint.ValueType  # 6
    """HINT_AUTO_AMBLE is deprecated due to the name being too similar to the Spot Autowalk feature.
    It has been replaced by HINT_SPEED_SELECT_AMBLE. Keeping this value in here for now for backwards
    compatibility, but this may be removed in future releases.
    """

class LocomotionHint(_LocomotionHint, metaclass=_LocomotionHintEnumTypeWrapper):
    """The locomotion hint specifying the gait of the robot."""
    pass

HINT_UNKNOWN: LocomotionHint.ValueType  # 0
"""Invalid; do not use."""

HINT_AUTO: LocomotionHint.ValueType  # 1
"""No hint, robot chooses an appropriate gait (typically trot.)"""

HINT_TROT: LocomotionHint.ValueType  # 2
"""Most robust gait which moves diagonal legs together."""

HINT_SPEED_SELECT_TROT: LocomotionHint.ValueType  # 3
"""Trot which comes to a stand when not commanded to move."""

HINT_CRAWL: LocomotionHint.ValueType  # 4
"""Slow and steady gait which moves only one foot at a time."""

HINT_SPEED_SELECT_CRAWL: LocomotionHint.ValueType  # 10
"""Crawl which comes to a stand when not commanded to move."""

HINT_AMBLE: LocomotionHint.ValueType  # 5
"""Four beat gait where one foot touches down at a time."""

HINT_SPEED_SELECT_AMBLE: LocomotionHint.ValueType  # 6
"""Amble which comes to a stand when not commanded to move."""

HINT_JOG: LocomotionHint.ValueType  # 7
"""Demo gait which moves diagonal leg pairs together with an aerial phase."""

HINT_HOP: LocomotionHint.ValueType  # 8
"""Demo gait which hops while holding some feet in the air."""

HINT_AUTO_TROT: LocomotionHint.ValueType  # 3
"""HINT_AUTO_TROT is deprecated due to the name being too similar to the Spot Autowalk feature.
It has been replaced by HINT_SPEED_SELECT_TROT. Keeping this value in here for now for backwards
compatibility, but this may be removed in future releases.
"""

HINT_AUTO_AMBLE: LocomotionHint.ValueType  # 6
"""HINT_AUTO_AMBLE is deprecated due to the name being too similar to the Spot Autowalk feature.
It has been replaced by HINT_SPEED_SELECT_AMBLE. Keeping this value in here for now for backwards
compatibility, but this may be removed in future releases.
"""

global___LocomotionHint = LocomotionHint


class _SwingHeight:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _SwingHeightEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_SwingHeight.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    SWING_HEIGHT_UNKNOWN: _SwingHeight.ValueType  # 0
    """Invalid; do not use."""

    SWING_HEIGHT_LOW: _SwingHeight.ValueType  # 1
    """Low-stepping. Robot will try to only swing legs a few cm away from ground."""

    SWING_HEIGHT_MEDIUM: _SwingHeight.ValueType  # 2
    """Default for most cases, use other values with caution."""

    SWING_HEIGHT_HIGH: _SwingHeight.ValueType  # 3
    """High-stepping. Possibly useful with degraded vision operation."""

class SwingHeight(_SwingHeight, metaclass=_SwingHeightEnumTypeWrapper):
    """The type of swing height for a step."""
    pass

SWING_HEIGHT_UNKNOWN: SwingHeight.ValueType  # 0
"""Invalid; do not use."""

SWING_HEIGHT_LOW: SwingHeight.ValueType  # 1
"""Low-stepping. Robot will try to only swing legs a few cm away from ground."""

SWING_HEIGHT_MEDIUM: SwingHeight.ValueType  # 2
"""Default for most cases, use other values with caution."""

SWING_HEIGHT_HIGH: SwingHeight.ValueType  # 3
"""High-stepping. Possibly useful with degraded vision operation."""

global___SwingHeight = SwingHeight


class MobilityParams(google.protobuf.message.Message):
    """Params common across spot movement and mobility."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    VEL_LIMIT_FIELD_NUMBER: builtins.int
    BODY_CONTROL_FIELD_NUMBER: builtins.int
    LOCOMOTION_HINT_FIELD_NUMBER: builtins.int
    STAIR_HINT_FIELD_NUMBER: builtins.int
    ALLOW_DEGRADED_PERCEPTION_FIELD_NUMBER: builtins.int
    OBSTACLE_PARAMS_FIELD_NUMBER: builtins.int
    SWING_HEIGHT_FIELD_NUMBER: builtins.int
    TERRAIN_PARAMS_FIELD_NUMBER: builtins.int
    DISALLOW_STAIR_TRACKER_FIELD_NUMBER: builtins.int
    EXTERNAL_FORCE_PARAMS_FIELD_NUMBER: builtins.int
    DISALLOW_NON_STAIRS_PITCH_LIMITING_FIELD_NUMBER: builtins.int
    DISABLE_NEARMAP_CLIFF_AVOIDANCE_FIELD_NUMBER: builtins.int
    @property
    def vel_limit(self) -> bosdyn.api.geometry_pb2.SE2VelocityLimit:
        """Max allowable velocity at any point in trajectory."""
        pass
    @property
    def body_control(self) -> global___BodyControlParams:
        """Parameters for controlling Spot's body during motion."""
        pass
    locomotion_hint: global___LocomotionHint.ValueType
    """Desired gait during locomotion"""

    stair_hint: builtins.bool
    """Stairs are only supported in trot gaits. Using this hint will override some user defaults in
    order to optimize stair behavior.
    """

    allow_degraded_perception: builtins.bool
    """Allow the robot to move with degraded perception when there are perception faults."""

    @property
    def obstacle_params(self) -> global___ObstacleParams:
        """Control of obstacle avoidance."""
        pass
    swing_height: global___SwingHeight.ValueType
    """Swing height setting"""

    @property
    def terrain_params(self) -> global___TerrainParams:
        """Ground terrain parameters."""
        pass
    disallow_stair_tracker: builtins.bool
    """Prevent the robot from using StairTracker even if in stairs mode."""

    @property
    def external_force_params(self) -> global___BodyExternalForceParams:
        """Robot Body External Force parameters"""
        pass
    disallow_non_stairs_pitch_limiting: builtins.bool
    """Prevent the robot from pitching to get a better look at rearward terrain except in stairs mode."""

    disable_nearmap_cliff_avoidance: builtins.bool
    """Disable the secondary nearmap-based cliff avoidance that runs while on stairs."""

    def __init__(self,
        *,
        vel_limit: typing.Optional[bosdyn.api.geometry_pb2.SE2VelocityLimit] = ...,
        body_control: typing.Optional[global___BodyControlParams] = ...,
        locomotion_hint: global___LocomotionHint.ValueType = ...,
        stair_hint: builtins.bool = ...,
        allow_degraded_perception: builtins.bool = ...,
        obstacle_params: typing.Optional[global___ObstacleParams] = ...,
        swing_height: global___SwingHeight.ValueType = ...,
        terrain_params: typing.Optional[global___TerrainParams] = ...,
        disallow_stair_tracker: builtins.bool = ...,
        external_force_params: typing.Optional[global___BodyExternalForceParams] = ...,
        disallow_non_stairs_pitch_limiting: builtins.bool = ...,
        disable_nearmap_cliff_avoidance: builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["body_control",b"body_control","external_force_params",b"external_force_params","obstacle_params",b"obstacle_params","terrain_params",b"terrain_params","vel_limit",b"vel_limit"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["allow_degraded_perception",b"allow_degraded_perception","body_control",b"body_control","disable_nearmap_cliff_avoidance",b"disable_nearmap_cliff_avoidance","disallow_non_stairs_pitch_limiting",b"disallow_non_stairs_pitch_limiting","disallow_stair_tracker",b"disallow_stair_tracker","external_force_params",b"external_force_params","locomotion_hint",b"locomotion_hint","obstacle_params",b"obstacle_params","stair_hint",b"stair_hint","swing_height",b"swing_height","terrain_params",b"terrain_params","vel_limit",b"vel_limit"]) -> None: ...
global___MobilityParams = MobilityParams

class BodyControlParams(google.protobuf.message.Message):
    """Parameters for offsetting the body from the normal default."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class _RotationSetting:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _RotationSettingEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[BodyControlParams._RotationSetting.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        ROTATION_SETTING_UNKNOWN: BodyControlParams._RotationSetting.ValueType  # 0
        """Invalid; do not use."""

        ROTATION_SETTING_OFFSET: BodyControlParams._RotationSetting.ValueType  # 1
        """Pitch & Roll are offset with respect to orientation of the footprint."""

        ROTATION_SETTING_ABSOLUTE: BodyControlParams._RotationSetting.ValueType  # 2
        """Pitch & Roll are offset with respect to gravity."""

    class RotationSetting(_RotationSetting, metaclass=_RotationSettingEnumTypeWrapper):
        """Setting for how the robot interprets base offset pitch & roll components.
        In the default case (ROTATION_SETTING_OFFSET) the robot will naturally align the body to the pitch of the current terrain.
        In some circumstances, the user may wish to override this value and try to maintain alignment
        with respect to gravity. Be careful with this setting as it may likely degrade robot performance in
        complex terrain, e.g. stairs, platforms, or slopes of sufficiently high grade.
        """
        pass

    ROTATION_SETTING_UNKNOWN: BodyControlParams.RotationSetting.ValueType  # 0
    """Invalid; do not use."""

    ROTATION_SETTING_OFFSET: BodyControlParams.RotationSetting.ValueType  # 1
    """Pitch & Roll are offset with respect to orientation of the footprint."""

    ROTATION_SETTING_ABSOLUTE: BodyControlParams.RotationSetting.ValueType  # 2
    """Pitch & Roll are offset with respect to gravity."""


    BASE_OFFSET_RT_FOOTPRINT_FIELD_NUMBER: builtins.int
    ROTATION_SETTING_FIELD_NUMBER: builtins.int
    @property
    def base_offset_rt_footprint(self) -> bosdyn.api.trajectory_pb2.SE3Trajectory:
        """Desired base offset relative to the footprint pseudo-frame.
        The footprint pseudo-frame is a gravity aligned frame with its origin located at the
        geometric center of the feet in the X-Y axis, and at the nominal height of the hips in the Z axis.
        The yaw of the frame (wrt the world) is calcuated by the average foot locations, and is aligned with the feet.
        """
        pass
    rotation_setting: global___BodyControlParams.RotationSetting.ValueType
    """The rotation setting for the robot body."""

    def __init__(self,
        *,
        base_offset_rt_footprint: typing.Optional[bosdyn.api.trajectory_pb2.SE3Trajectory] = ...,
        rotation_setting: global___BodyControlParams.RotationSetting.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["base_offset_rt_footprint",b"base_offset_rt_footprint"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["base_offset_rt_footprint",b"base_offset_rt_footprint","rotation_setting",b"rotation_setting"]) -> None: ...
global___BodyControlParams = BodyControlParams

class ObstacleParams(google.protobuf.message.Message):
    """Parameters for obstacle avoidance types."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    DISABLE_VISION_FOOT_OBSTACLE_AVOIDANCE_FIELD_NUMBER: builtins.int
    DISABLE_VISION_FOOT_CONSTRAINT_AVOIDANCE_FIELD_NUMBER: builtins.int
    DISABLE_VISION_BODY_OBSTACLE_AVOIDANCE_FIELD_NUMBER: builtins.int
    OBSTACLE_AVOIDANCE_PADDING_FIELD_NUMBER: builtins.int
    DISABLE_VISION_FOOT_OBSTACLE_BODY_ASSIST_FIELD_NUMBER: builtins.int
    DISABLE_VISION_NEGATIVE_OBSTACLES_FIELD_NUMBER: builtins.int
    disable_vision_foot_obstacle_avoidance: builtins.bool
    """Use vision to make the feet avoid obstacles by swinging higher?"""

    disable_vision_foot_constraint_avoidance: builtins.bool
    """Use vision to make the feet avoid constraints like edges of stairs?"""

    disable_vision_body_obstacle_avoidance: builtins.bool
    """Use vision to make the body avoid obstacles?"""

    obstacle_avoidance_padding: builtins.float
    """Desired padding around the body to use when attempting to avoid obstacles.
    Described in meters. Must be >= 0.
    """

    disable_vision_foot_obstacle_body_assist: builtins.bool
    """Prevent the robot body from raising above nominal height to avoid lower-leg collisions with
    the terrain.
    """

    disable_vision_negative_obstacles: builtins.bool
    """Use vision to make the robot avoid stepping into negative obstacles?"""

    def __init__(self,
        *,
        disable_vision_foot_obstacle_avoidance: builtins.bool = ...,
        disable_vision_foot_constraint_avoidance: builtins.bool = ...,
        disable_vision_body_obstacle_avoidance: builtins.bool = ...,
        obstacle_avoidance_padding: builtins.float = ...,
        disable_vision_foot_obstacle_body_assist: builtins.bool = ...,
        disable_vision_negative_obstacles: builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["disable_vision_body_obstacle_avoidance",b"disable_vision_body_obstacle_avoidance","disable_vision_foot_constraint_avoidance",b"disable_vision_foot_constraint_avoidance","disable_vision_foot_obstacle_avoidance",b"disable_vision_foot_obstacle_avoidance","disable_vision_foot_obstacle_body_assist",b"disable_vision_foot_obstacle_body_assist","disable_vision_negative_obstacles",b"disable_vision_negative_obstacles","obstacle_avoidance_padding",b"obstacle_avoidance_padding"]) -> None: ...
global___ObstacleParams = ObstacleParams

class TerrainParams(google.protobuf.message.Message):
    """Ground contact parameters that describe the terrain."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class _GratedSurfacesMode:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _GratedSurfacesModeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[TerrainParams._GratedSurfacesMode.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        GRATED_SURFACES_MODE_UNKNOWN: TerrainParams._GratedSurfacesMode.ValueType  # 0
        """Invalid; do not use."""

        GRATED_SURFACES_MODE_OFF: TerrainParams._GratedSurfacesMode.ValueType  # 1
        GRATED_SURFACES_MODE_ON: TerrainParams._GratedSurfacesMode.ValueType  # 2
        GRATED_SURFACES_MODE_AUTO: TerrainParams._GratedSurfacesMode.ValueType  # 3
        """Robot will automatically turn mode on or off"""

    class GratedSurfacesMode(_GratedSurfacesMode, metaclass=_GratedSurfacesModeEnumTypeWrapper):
        """Options for Grated Surfaces Mode. When Grated Surfaces Mode is on, the robot assumes the
        ground below it is made of grated metal or other repeated pattern. When on, the robot will
        make assumptions about the environment structure and more aggressively filter noise in
        perception data.
        """
        pass

    GRATED_SURFACES_MODE_UNKNOWN: TerrainParams.GratedSurfacesMode.ValueType  # 0
    """Invalid; do not use."""

    GRATED_SURFACES_MODE_OFF: TerrainParams.GratedSurfacesMode.ValueType  # 1
    GRATED_SURFACES_MODE_ON: TerrainParams.GratedSurfacesMode.ValueType  # 2
    GRATED_SURFACES_MODE_AUTO: TerrainParams.GratedSurfacesMode.ValueType  # 3
    """Robot will automatically turn mode on or off"""


    GROUND_MU_HINT_FIELD_NUMBER: builtins.int
    ENABLE_GRATED_FLOOR_FIELD_NUMBER: builtins.int
    GRATED_SURFACES_MODE_FIELD_NUMBER: builtins.int
    @property
    def ground_mu_hint(self) -> google.protobuf.wrappers_pb2.DoubleValue:
        """Terrain coefficient of friction user hint. This value must be postive and will clamped if
        necessary on the robot side. Best suggested values lie in the range between 0.4 and 0.8
        (which is the robot's default.)
        """
        pass
    enable_grated_floor: builtins.bool
    """*** Deprecation Warning ***
    DEPRECATED as of 3.0.0: The boolean field has been replaced by the field grated_surfaces_mode
    The following field will be deprecated and moved to 'reserved' in a future release.
    """

    grated_surfaces_mode: global___TerrainParams.GratedSurfacesMode.ValueType
    """The selected option for grated surfaces mode"""

    def __init__(self,
        *,
        ground_mu_hint: typing.Optional[google.protobuf.wrappers_pb2.DoubleValue] = ...,
        enable_grated_floor: builtins.bool = ...,
        grated_surfaces_mode: global___TerrainParams.GratedSurfacesMode.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["ground_mu_hint",b"ground_mu_hint"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["enable_grated_floor",b"enable_grated_floor","grated_surfaces_mode",b"grated_surfaces_mode","ground_mu_hint",b"ground_mu_hint"]) -> None: ...
global___TerrainParams = TerrainParams

class BodyExternalForceParams(google.protobuf.message.Message):
    """External Force on robot body parameters. This is a beta feature and still can have some odd behaviors.
    By default, the external force estimator is disabled on the robot.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class _ExternalForceIndicator:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _ExternalForceIndicatorEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[BodyExternalForceParams._ExternalForceIndicator.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        EXTERNAL_FORCE_NONE: BodyExternalForceParams._ExternalForceIndicator.ValueType  # 0
        """No external forces considered."""

        EXTERNAL_FORCE_USE_ESTIMATE: BodyExternalForceParams._ExternalForceIndicator.ValueType  # 1
        """Use external forces estimated by the robot"""

        EXTERNAL_FORCE_USE_OVERRIDE: BodyExternalForceParams._ExternalForceIndicator.ValueType  # 2
        """Use external forces specified in an override vector."""

    class ExternalForceIndicator(_ExternalForceIndicator, metaclass=_ExternalForceIndicatorEnumTypeWrapper):
        """Indicates what external force estimate/override the robot should use.
        By default, the external force estimator is disabled on the robot.
        """
        pass

    EXTERNAL_FORCE_NONE: BodyExternalForceParams.ExternalForceIndicator.ValueType  # 0
    """No external forces considered."""

    EXTERNAL_FORCE_USE_ESTIMATE: BodyExternalForceParams.ExternalForceIndicator.ValueType  # 1
    """Use external forces estimated by the robot"""

    EXTERNAL_FORCE_USE_OVERRIDE: BodyExternalForceParams.ExternalForceIndicator.ValueType  # 2
    """Use external forces specified in an override vector."""


    EXTERNAL_FORCE_INDICATOR_FIELD_NUMBER: builtins.int
    FRAME_NAME_FIELD_NUMBER: builtins.int
    EXTERNAL_FORCE_OVERRIDE_FIELD_NUMBER: builtins.int
    external_force_indicator: global___BodyExternalForceParams.ExternalForceIndicator.ValueType
    """The type of external force described by the parameters."""

    frame_name: typing.Text
    """The frame name for which the external_force_override is defined in. The frame must be known to the robot."""

    @property
    def external_force_override(self) -> bosdyn.api.geometry_pb2.Vec3:
        """Specifies a force that the body should expect to feel. This allows the robot to "lean into"
        an external force. Be careful using this override, since incorrect information can cause
        the robot to fall over.
        For example, if the robot is leaning against a wall in front of it, the force override would be in the
        negative x dimension. If the robot was pulling something directly behind it, the force override would
        be in the negative x dimension as well.
        """
        pass
    def __init__(self,
        *,
        external_force_indicator: global___BodyExternalForceParams.ExternalForceIndicator.ValueType = ...,
        frame_name: typing.Text = ...,
        external_force_override: typing.Optional[bosdyn.api.geometry_pb2.Vec3] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["external_force_override",b"external_force_override"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["external_force_indicator",b"external_force_indicator","external_force_override",b"external_force_override","frame_name",b"frame_name"]) -> None: ...
global___BodyExternalForceParams = BodyExternalForceParams
