"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import bosdyn.api.data_acquisition_pb2
import bosdyn.api.data_buffer_pb2
import bosdyn.api.docking.docking_pb2
import bosdyn.api.geometry_pb2
import bosdyn.api.graph_nav.graph_nav_pb2
import bosdyn.api.graph_nav.nav_pb2
import bosdyn.api.mission.util_pb2
import bosdyn.api.power_pb2
import bosdyn.api.robot_command_pb2
import bosdyn.api.spot_cam.camera_pb2
import bosdyn.api.spot_cam.logging_pb2
import bosdyn.api.spot_cam.ptz_pb2
import builtins
import google.protobuf.any_pb2
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class Node(google.protobuf.message.Message):
    """Wrapper for a mission node. Contains the basics common to all mission nodes.
    Specifics of what the node does are contained in the "impl" field.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    USER_DATA_FIELD_NUMBER: builtins.int
    REFERENCE_ID_FIELD_NUMBER: builtins.int
    IMPL_FIELD_NUMBER: builtins.int
    NODE_REFERENCE_FIELD_NUMBER: builtins.int
    PARAMETER_VALUES_FIELD_NUMBER: builtins.int
    OVERRIDES_FIELD_NUMBER: builtins.int
    PARAMETERS_FIELD_NUMBER: builtins.int
    name: typing.Text
    """Human-readable name of this node, e.g. "Goto waypoint 1", or "Power On"."""

    @property
    def user_data(self) -> bosdyn.api.mission.util_pb2.UserData:
        """Collection of user data associated with this node."""
        pass
    reference_id: typing.Text
    """Reference identifier of this node.
    Set iff another node references this one.
    """

    @property
    def impl(self) -> google.protobuf.any_pb2.Any:
        """Implementation of this node. For example, this may be a Sequence."""
        pass
    node_reference: typing.Text
    """Unique identifier of another node. If this is filled out, rather than the "impl", then
    the referenced node will be used in place of this one.
    """

    @property
    def parameter_values(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[bosdyn.api.mission.util_pb2.KeyValue]:
        """Defines parameters, used by this node or its children.
        The "key" in KeyValue is the name of the parameter being defined.
        The value can be a constant or another parameter value.
        """
        pass
    @property
    def overrides(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[bosdyn.api.mission.util_pb2.KeyValue]:
        """Overwrites a protobuf field in this node's implementation.
        The "key" in KeyValue is the name of the field to override.
        The value to write can be sourced from a constant, or a parameter value.
        """
        pass
    @property
    def parameters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[bosdyn.api.mission.util_pb2.VariableDeclaration]:
        """Declares parameters needed at compile time by this node, or children of this node.
        This is a way for a node to communicate what parameters its implementation and/or children
        require, without unpacking the entire subtree.
        """
        pass
    def __init__(self,
        *,
        name: typing.Text = ...,
        user_data: typing.Optional[bosdyn.api.mission.util_pb2.UserData] = ...,
        reference_id: typing.Text = ...,
        impl: typing.Optional[google.protobuf.any_pb2.Any] = ...,
        node_reference: typing.Text = ...,
        parameter_values: typing.Optional[typing.Iterable[bosdyn.api.mission.util_pb2.KeyValue]] = ...,
        overrides: typing.Optional[typing.Iterable[bosdyn.api.mission.util_pb2.KeyValue]] = ...,
        parameters: typing.Optional[typing.Iterable[bosdyn.api.mission.util_pb2.VariableDeclaration]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["impl",b"impl","node_reference",b"node_reference","type",b"type","user_data",b"user_data"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["impl",b"impl","name",b"name","node_reference",b"node_reference","overrides",b"overrides","parameter_values",b"parameter_values","parameters",b"parameters","reference_id",b"reference_id","type",b"type","user_data",b"user_data"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["type",b"type"]) -> typing.Optional[typing_extensions.Literal["impl","node_reference"]]: ...
global___Node = Node

class Sequence(google.protobuf.message.Message):
    """Run  all children in order until a child fails."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ALWAYS_RESTART_FIELD_NUMBER: builtins.int
    CHILDREN_FIELD_NUMBER: builtins.int
    always_restart: builtins.bool
    """Forces the execution to always begin with the first child.  If false, and
    the Sequence ran last tick, it will continue with the node it was ticking.
    """

    @property
    def children(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Node]:
        """List of all children to iterate through."""
        pass
    def __init__(self,
        *,
        always_restart: builtins.bool = ...,
        children: typing.Optional[typing.Iterable[global___Node]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["always_restart",b"always_restart","children",b"children"]) -> None: ...
global___Sequence = Sequence

class Selector(google.protobuf.message.Message):
    """Run all children in order until a child succeeds."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ALWAYS_RESTART_FIELD_NUMBER: builtins.int
    CHILDREN_FIELD_NUMBER: builtins.int
    always_restart: builtins.bool
    """Forces the execution to always begin with the first child.  If false, and
    the Selector ran last tick, it will continue with the node it was ticking.
    """

    @property
    def children(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Node]:
        """List of all children to iterate through."""
        pass
    def __init__(self,
        *,
        always_restart: builtins.bool = ...,
        children: typing.Optional[typing.Iterable[global___Node]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["always_restart",b"always_restart","children",b"children"]) -> None: ...
global___Selector = Selector

class Repeat(google.protobuf.message.Message):
    """Repeat a child node."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    MAX_STARTS_FIELD_NUMBER: builtins.int
    CHILD_FIELD_NUMBER: builtins.int
    START_COUNTER_STATE_NAME_FIELD_NUMBER: builtins.int
    max_starts: builtins.int
    """Start the child node exactly this many times.
    Note that a value of 1 makes the Repeat node a no-op.
    """

    @property
    def child(self) -> global___Node:
        """Child to repeat max_starts times."""
        pass
    start_counter_state_name: typing.Text
    """If set, the node will write the start index to the blackboard."""

    def __init__(self,
        *,
        max_starts: builtins.int = ...,
        child: typing.Optional[global___Node] = ...,
        start_counter_state_name: typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["child",b"child"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["child",b"child","max_starts",b"max_starts","start_counter_state_name",b"start_counter_state_name"]) -> None: ...
global___Repeat = Repeat

class Retry(google.protobuf.message.Message):
    """Retry a child node until it succeeds, or exceeds a number of attempts."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    MAX_ATTEMPTS_FIELD_NUMBER: builtins.int
    CHILD_FIELD_NUMBER: builtins.int
    ATTEMPT_COUNTER_STATE_NAME_FIELD_NUMBER: builtins.int
    max_attempts: builtins.int
    """Only allow this many attempts. Note that a value of 1 makes this Retry node a no-op."""

    @property
    def child(self) -> global___Node:
        """Child to retry up to max_attempts."""
        pass
    attempt_counter_state_name: typing.Text
    """If set, the node will write the attempt index to the blackboard."""

    def __init__(self,
        *,
        max_attempts: builtins.int = ...,
        child: typing.Optional[global___Node] = ...,
        attempt_counter_state_name: typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["child",b"child"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["attempt_counter_state_name",b"attempt_counter_state_name","child",b"child","max_attempts",b"max_attempts"]) -> None: ...
global___Retry = Retry

class ForDuration(google.protobuf.message.Message):
    """Run this child for a maximum amount of mission execution time.
    Will exit with child's status if the child finishes early,
    FAILURE if the child remains in RUNNING state for too long 
    and no timeout_child is specified, or the status of the
    timeout_child.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    DURATION_FIELD_NUMBER: builtins.int
    CHILD_FIELD_NUMBER: builtins.int
    TIME_REMAINING_NAME_FIELD_NUMBER: builtins.int
    TIMEOUT_CHILD_FIELD_NUMBER: builtins.int
    @property
    def duration(self) -> google.protobuf.duration_pb2.Duration:
        """Maximum duration of mission execution time."""
        pass
    @property
    def child(self) -> global___Node:
        """Child to execute for the duration."""
        pass
    time_remaining_name: typing.Text
    """Optional blackboard variable name.  If specified, this node will define a blackboard
    variable that its child has access to, and write the number of seconds remaining as
    a double to the blackboard under this name.
    """

    @property
    def timeout_child(self) -> global___Node:
        """Optional node that will run if the child times out.  If not specified, this node
        will return FAILURE when the child times out.  If specified, and the
        child times out, this node will return the status of the timeout_child.
        The timeout_child does not respect the original timeout.
        """
        pass
    def __init__(self,
        *,
        duration: typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        child: typing.Optional[global___Node] = ...,
        time_remaining_name: typing.Text = ...,
        timeout_child: typing.Optional[global___Node] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["child",b"child","duration",b"duration","timeout_child",b"timeout_child"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["child",b"child","duration",b"duration","time_remaining_name",b"time_remaining_name","timeout_child",b"timeout_child"]) -> None: ...
global___ForDuration = ForDuration

class SimpleParallel(google.protobuf.message.Message):
    """Run two child nodes together, returning the primary child's result when it completes."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    PRIMARY_FIELD_NUMBER: builtins.int
    SECONDARY_FIELD_NUMBER: builtins.int
    @property
    def primary(self) -> global___Node:
        """Primary node, whose completion will end the execution of SimpleParallel."""
        pass
    @property
    def secondary(self) -> global___Node:
        """Secondary node, which will be ticked as long as the primary is still running."""
        pass
    def __init__(self,
        *,
        primary: typing.Optional[global___Node] = ...,
        secondary: typing.Optional[global___Node] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["primary",b"primary","secondary",b"secondary"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["primary",b"primary","secondary",b"secondary"]) -> None: ...
global___SimpleParallel = SimpleParallel

class Condition(google.protobuf.message.Message):
    """Checks a simple comparison statement."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class _Compare:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _CompareEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Condition._Compare.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        COMPARE_UNKNOWN: Condition._Compare.ValueType  # 0
        """Invalid, do not use."""

        COMPARE_EQ: Condition._Compare.ValueType  # 1
        """Equal."""

        COMPARE_NE: Condition._Compare.ValueType  # 2
        """Not equal."""

        COMPARE_LT: Condition._Compare.ValueType  # 3
        """Less than."""

        COMPARE_GT: Condition._Compare.ValueType  # 4
        """Greater than."""

        COMPARE_LE: Condition._Compare.ValueType  # 5
        """Less than or equal."""

        COMPARE_GE: Condition._Compare.ValueType  # 6
        """Greater than or equal."""

    class Compare(_Compare, metaclass=_CompareEnumTypeWrapper):
        """Comparison operator."""
        pass

    COMPARE_UNKNOWN: Condition.Compare.ValueType  # 0
    """Invalid, do not use."""

    COMPARE_EQ: Condition.Compare.ValueType  # 1
    """Equal."""

    COMPARE_NE: Condition.Compare.ValueType  # 2
    """Not equal."""

    COMPARE_LT: Condition.Compare.ValueType  # 3
    """Less than."""

    COMPARE_GT: Condition.Compare.ValueType  # 4
    """Greater than."""

    COMPARE_LE: Condition.Compare.ValueType  # 5
    """Less than or equal."""

    COMPARE_GE: Condition.Compare.ValueType  # 6
    """Greater than or equal."""


    class _HandleStaleness:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _HandleStalenessEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Condition._HandleStaleness.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        HANDLE_STALE_UNKNOWN: Condition._HandleStaleness.ValueType  # 0
        """acts like READ_ANYWAY for backwards compatibility."""

        HANDLE_STALE_READ_ANYWAY: Condition._HandleStaleness.ValueType  # 1
        """ignore how stale this data is."""

        HANDLE_STALE_RUN_UNTIL_FRESH: Condition._HandleStaleness.ValueType  # 2
        """return the RUNNING status until the data being read is not stale."""

        HANDLE_STALE_FAIL: Condition._HandleStaleness.ValueType  # 3
        """return FAILURE status if stale data is read."""

    class HandleStaleness(_HandleStaleness, metaclass=_HandleStalenessEnumTypeWrapper):
        """When comparing runtime values in the blackboard, some values might be "stale" (i.e too old).
        This defines how the comparator should behave when a read value is stale.
        """
        pass

    HANDLE_STALE_UNKNOWN: Condition.HandleStaleness.ValueType  # 0
    """acts like READ_ANYWAY for backwards compatibility."""

    HANDLE_STALE_READ_ANYWAY: Condition.HandleStaleness.ValueType  # 1
    """ignore how stale this data is."""

    HANDLE_STALE_RUN_UNTIL_FRESH: Condition.HandleStaleness.ValueType  # 2
    """return the RUNNING status until the data being read is not stale."""

    HANDLE_STALE_FAIL: Condition.HandleStaleness.ValueType  # 3
    """return FAILURE status if stale data is read."""


    class Operand(google.protobuf.message.Message):
        """Options for where to retrieve values from."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        VAR_FIELD_NUMBER: builtins.int
        CONST_FIELD_NUMBER: builtins.int
        @property
        def var(self) -> bosdyn.api.mission.util_pb2.VariableDeclaration:
            """Reference an existing variable."""
            pass
        @property
        def const(self) -> bosdyn.api.mission.util_pb2.ConstantValue:
            """Use a constant value."""
            pass
        def __init__(self,
            *,
            var: typing.Optional[bosdyn.api.mission.util_pb2.VariableDeclaration] = ...,
            const: typing.Optional[bosdyn.api.mission.util_pb2.ConstantValue] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["const",b"const","type",b"type","var",b"var"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["const",b"const","type",b"type","var",b"var"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["type",b"type"]) -> typing.Optional[typing_extensions.Literal["var","const"]]: ...

    LHS_FIELD_NUMBER: builtins.int
    RHS_FIELD_NUMBER: builtins.int
    OPERATION_FIELD_NUMBER: builtins.int
    HANDLE_STALENESS_FIELD_NUMBER: builtins.int
    @property
    def lhs(self) -> global___Condition.Operand:
        """Left-hand side of the comparison."""
        pass
    @property
    def rhs(self) -> global___Condition.Operand:
        """Right-hand side of the comparison."""
        pass
    operation: global___Condition.Compare.ValueType
    """Comparison operator to compare lhs and rhs."""

    handle_staleness: global___Condition.HandleStaleness.ValueType
    def __init__(self,
        *,
        lhs: typing.Optional[global___Condition.Operand] = ...,
        rhs: typing.Optional[global___Condition.Operand] = ...,
        operation: global___Condition.Compare.ValueType = ...,
        handle_staleness: global___Condition.HandleStaleness.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["lhs",b"lhs","rhs",b"rhs"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["handle_staleness",b"handle_staleness","lhs",b"lhs","operation",b"operation","rhs",b"rhs"]) -> None: ...
global___Condition = Condition

class BosdynRobotState(google.protobuf.message.Message):
    """Get state from the robot."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SERVICE_NAME_FIELD_NUMBER: builtins.int
    HOST_FIELD_NUMBER: builtins.int
    CHILD_FIELD_NUMBER: builtins.int
    STATE_NAME_FIELD_NUMBER: builtins.int
    service_name: typing.Text
    """Name of the service to use."""

    host: typing.Text
    """Host machine the service is running on."""

    @property
    def child(self) -> global___Node:
        """Child node. Children will have access to the state gathered by this node."""
        pass
    state_name: typing.Text
    """Name of the bosdyn.api.RobotState object in the blackboard. For example, if this is set to
    "robot", children can look up "robot.power_state.motor_power_state" in the blackboard.
    """

    def __init__(self,
        *,
        service_name: typing.Text = ...,
        host: typing.Text = ...,
        child: typing.Optional[global___Node] = ...,
        state_name: typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["child",b"child"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["child",b"child","host",b"host","service_name",b"service_name","state_name",b"state_name"]) -> None: ...
global___BosdynRobotState = BosdynRobotState

class BosdynDockState(google.protobuf.message.Message):
    """Get the state of the docking service from the robot."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SERVICE_NAME_FIELD_NUMBER: builtins.int
    HOST_FIELD_NUMBER: builtins.int
    CHILD_FIELD_NUMBER: builtins.int
    STATE_NAME_FIELD_NUMBER: builtins.int
    service_name: typing.Text
    """Name of the service to use."""

    host: typing.Text
    """Host machine the service is running on."""

    @property
    def child(self) -> global___Node:
        """Child node. Children will have access to the state gathered by this node."""
        pass
    state_name: typing.Text
    """Name of the bosdyn.api.DockState object in the blackboard. For example, if this is set to
    "power_status", children can look up "power_status" in the blackboard.
    """

    def __init__(self,
        *,
        service_name: typing.Text = ...,
        host: typing.Text = ...,
        child: typing.Optional[global___Node] = ...,
        state_name: typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["child",b"child"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["child",b"child","host",b"host","service_name",b"service_name","state_name",b"state_name"]) -> None: ...
global___BosdynDockState = BosdynDockState

class BosdynRobotCommand(google.protobuf.message.Message):
    """Execute a RobotCommand.
    These nodes will "succeed" once a feedback response is received indicating success. Any commands
    that require an "end time" will have that information set based on the end time of the mission.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SERVICE_NAME_FIELD_NUMBER: builtins.int
    HOST_FIELD_NUMBER: builtins.int
    COMMAND_FIELD_NUMBER: builtins.int
    service_name: typing.Text
    """Name of the service to use."""

    host: typing.Text
    """Host machine the directory is running on."""

    @property
    def command(self) -> bosdyn.api.robot_command_pb2.RobotCommand:
        """The command to execute. See the RobotCommand documentation for details."""
        pass
    def __init__(self,
        *,
        service_name: typing.Text = ...,
        host: typing.Text = ...,
        command: typing.Optional[bosdyn.api.robot_command_pb2.RobotCommand] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["command",b"command"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["command",b"command","host",b"host","service_name",b"service_name"]) -> None: ...
global___BosdynRobotCommand = BosdynRobotCommand

class BosdynPowerRequest(google.protobuf.message.Message):
    """Make a robot power request"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SERVICE_NAME_FIELD_NUMBER: builtins.int
    HOST_FIELD_NUMBER: builtins.int
    REQUEST_FIELD_NUMBER: builtins.int
    service_name: typing.Text
    """Name of the service to use."""

    host: typing.Text
    """Host machine the service is running on."""

    request: bosdyn.api.power_pb2.PowerCommandRequest.Request.ValueType
    """The request to make. See the PowerCommandRequest documentation for details."""

    def __init__(self,
        *,
        service_name: typing.Text = ...,
        host: typing.Text = ...,
        request: bosdyn.api.power_pb2.PowerCommandRequest.Request.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["host",b"host","request",b"request","service_name",b"service_name"]) -> None: ...
global___BosdynPowerRequest = BosdynPowerRequest

class BosdynNavigateTo(google.protobuf.message.Message):
    """Tell the robot to navigate to a waypoint."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SERVICE_NAME_FIELD_NUMBER: builtins.int
    HOST_FIELD_NUMBER: builtins.int
    DESTINATION_WAYPOINT_ID_FIELD_NUMBER: builtins.int
    ROUTE_GEN_PARAMS_FIELD_NUMBER: builtins.int
    TRAVEL_PARAMS_FIELD_NUMBER: builtins.int
    NAVIGATION_FEEDBACK_RESPONSE_BLACKBOARD_KEY_FIELD_NUMBER: builtins.int
    NAVIGATE_TO_RESPONSE_BLACKBOARD_KEY_FIELD_NUMBER: builtins.int
    service_name: typing.Text
    """Name of the service to use."""

    host: typing.Text
    """Host machine the service is running on."""

    destination_waypoint_id: typing.Text
    """ID of the waypoint to go to."""

    @property
    def route_gen_params(self) -> bosdyn.api.graph_nav.graph_nav_pb2.RouteGenParams:
        """Preferences on how to pick the route."""
        pass
    @property
    def travel_params(self) -> bosdyn.api.graph_nav.graph_nav_pb2.TravelParams:
        """Parameters that define how to traverse and end the route."""
        pass
    navigation_feedback_response_blackboard_key: typing.Text
    """If provided, this will write the last NavigationFeedbackResponse message
    to a blackboard variable with this name.
    """

    navigate_to_response_blackboard_key: typing.Text
    """If provided, this will write the last NavigateToResponse message to
    a blackboard variable with this name.
    """

    def __init__(self,
        *,
        service_name: typing.Text = ...,
        host: typing.Text = ...,
        destination_waypoint_id: typing.Text = ...,
        route_gen_params: typing.Optional[bosdyn.api.graph_nav.graph_nav_pb2.RouteGenParams] = ...,
        travel_params: typing.Optional[bosdyn.api.graph_nav.graph_nav_pb2.TravelParams] = ...,
        navigation_feedback_response_blackboard_key: typing.Text = ...,
        navigate_to_response_blackboard_key: typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["route_gen_params",b"route_gen_params","travel_params",b"travel_params"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["destination_waypoint_id",b"destination_waypoint_id","host",b"host","navigate_to_response_blackboard_key",b"navigate_to_response_blackboard_key","navigation_feedback_response_blackboard_key",b"navigation_feedback_response_blackboard_key","route_gen_params",b"route_gen_params","service_name",b"service_name","travel_params",b"travel_params"]) -> None: ...
global___BosdynNavigateTo = BosdynNavigateTo

class BosdynNavigateRoute(google.protobuf.message.Message):
    """Tell the robot to navigate a route."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SERVICE_NAME_FIELD_NUMBER: builtins.int
    HOST_FIELD_NUMBER: builtins.int
    ROUTE_FIELD_NUMBER: builtins.int
    ROUTE_FOLLOW_PARAMS_FIELD_NUMBER: builtins.int
    TRAVEL_PARAMS_FIELD_NUMBER: builtins.int
    NAVIGATION_FEEDBACK_RESPONSE_BLACKBOARD_KEY_FIELD_NUMBER: builtins.int
    NAVIGATE_ROUTE_RESPONSE_BLACKBOARD_KEY_FIELD_NUMBER: builtins.int
    service_name: typing.Text
    """Name of the service to use."""

    host: typing.Text
    """Host machine the service is running on."""

    @property
    def route(self) -> bosdyn.api.graph_nav.nav_pb2.Route:
        """A route for the robot to follow."""
        pass
    @property
    def route_follow_params(self) -> bosdyn.api.graph_nav.graph_nav_pb2.RouteFollowingParams:
        """What should the robot do if it is not at the expected point in the route, or the route is
        blocked.
        """
        pass
    @property
    def travel_params(self) -> bosdyn.api.graph_nav.graph_nav_pb2.TravelParams:
        """Parameters that define how to traverse and end the route."""
        pass
    navigation_feedback_response_blackboard_key: typing.Text
    """If provided, this will write the last NavigationFeedbackResponse message
    to a blackboard variable with this name.
    """

    navigate_route_response_blackboard_key: typing.Text
    """If provided, this will write the last NavigateRouteResponse message to
    a blackboard variable with this name.
    """

    def __init__(self,
        *,
        service_name: typing.Text = ...,
        host: typing.Text = ...,
        route: typing.Optional[bosdyn.api.graph_nav.nav_pb2.Route] = ...,
        route_follow_params: typing.Optional[bosdyn.api.graph_nav.graph_nav_pb2.RouteFollowingParams] = ...,
        travel_params: typing.Optional[bosdyn.api.graph_nav.graph_nav_pb2.TravelParams] = ...,
        navigation_feedback_response_blackboard_key: typing.Text = ...,
        navigate_route_response_blackboard_key: typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["route",b"route","route_follow_params",b"route_follow_params","travel_params",b"travel_params"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["host",b"host","navigate_route_response_blackboard_key",b"navigate_route_response_blackboard_key","navigation_feedback_response_blackboard_key",b"navigation_feedback_response_blackboard_key","route",b"route","route_follow_params",b"route_follow_params","service_name",b"service_name","travel_params",b"travel_params"]) -> None: ...
global___BosdynNavigateRoute = BosdynNavigateRoute

class BosdynGraphNavState(google.protobuf.message.Message):
    """Get GraphNav state from the robot and save it to the blackboard."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SERVICE_NAME_FIELD_NUMBER: builtins.int
    HOST_FIELD_NUMBER: builtins.int
    CHILD_FIELD_NUMBER: builtins.int
    STATE_NAME_FIELD_NUMBER: builtins.int
    WAYPOINT_ID_FIELD_NUMBER: builtins.int
    service_name: typing.Text
    """Name of the service to use."""

    host: typing.Text
    """Host machine the service is running on."""

    @property
    def child(self) -> global___Node:
        """Child node. Children will have access to the state gathered by this node."""
        pass
    state_name: typing.Text
    """Name of the bosdyn.api.GetLocalizationStateResponse object in the blackboard. For example,
    if this is set to "nav", children can look up "nav.localization.waypoint_id" in the
    blackboard to get the waypoint the robot is localized to.
    """

    waypoint_id: typing.Text
    """Id of the waypoint that we want the localization to be relative to.
    If this is empty, the localization will be relative to the waypoint that the
    robot is currently localized to.
    """

    def __init__(self,
        *,
        service_name: typing.Text = ...,
        host: typing.Text = ...,
        child: typing.Optional[global___Node] = ...,
        state_name: typing.Text = ...,
        waypoint_id: typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["child",b"child"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["child",b"child","host",b"host","service_name",b"service_name","state_name",b"state_name","waypoint_id",b"waypoint_id"]) -> None: ...
global___BosdynGraphNavState = BosdynGraphNavState

class BosdynGraphNavLocalize(google.protobuf.message.Message):
    """Tell GraphNav to re-localize the robot using a SetLocalizationRequest. This overrides whatever
    the current localization is. This can be useful to reinitialize the system at a known state.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SERVICE_NAME_FIELD_NUMBER: builtins.int
    HOST_FIELD_NUMBER: builtins.int
    LOCALIZATION_REQUEST_FIELD_NUMBER: builtins.int
    service_name: typing.Text
    """Name of the service to use."""

    host: typing.Text
    """Host machine the service is running on."""

    @property
    def localization_request(self) -> bosdyn.api.graph_nav.graph_nav_pb2.SetLocalizationRequest:
        """If no localization_request is provided, the default options used
        are FIDUCIAL_INIT_NEAREST (the system will initialize to the nearest fiducial).
        Otherwise, the options inside the set_localization_request will be used.
        Note that ko_tform_body in the request will be ignored (it will be recalculated at runtime).
        """
        pass
    def __init__(self,
        *,
        service_name: typing.Text = ...,
        host: typing.Text = ...,
        localization_request: typing.Optional[bosdyn.api.graph_nav.graph_nav_pb2.SetLocalizationRequest] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["localization_request",b"localization_request"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["host",b"host","localization_request",b"localization_request","service_name",b"service_name"]) -> None: ...
global___BosdynGraphNavLocalize = BosdynGraphNavLocalize

class BosdynRecordEvent(google.protobuf.message.Message):
    """Record an APIEvent"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SERVICE_NAME_FIELD_NUMBER: builtins.int
    HOST_FIELD_NUMBER: builtins.int
    EVENT_FIELD_NUMBER: builtins.int
    service_name: typing.Text
    """Name of the service to use."""

    host: typing.Text
    """Host machine the service is running on."""

    @property
    def event(self) -> bosdyn.api.data_buffer_pb2.Event:
        """The event to be logged. Note that everything should be populated except the id, start_time
        and end_time. The start and end time will be populated by the mission, using the node's start time.
        The id field shouldn't be set when the start and end times are the same.
        """
        pass
    def __init__(self,
        *,
        service_name: typing.Text = ...,
        host: typing.Text = ...,
        event: typing.Optional[bosdyn.api.data_buffer_pb2.Event] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["event",b"event"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["event",b"event","host",b"host","service_name",b"service_name"]) -> None: ...
global___BosdynRecordEvent = BosdynRecordEvent

class RemoteGrpc(google.protobuf.message.Message):
    """Call out to another system using the RemoteMission service."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    HOST_FIELD_NUMBER: builtins.int
    SERVICE_NAME_FIELD_NUMBER: builtins.int
    TIMEOUT_FIELD_NUMBER: builtins.int
    LEASE_RESOURCES_FIELD_NUMBER: builtins.int
    INPUTS_FIELD_NUMBER: builtins.int
    host: typing.Text
    """Host that is running the directory server. Usually, this is just the robot."""

    service_name: typing.Text
    """Name of the service in the directory."""

    timeout: builtins.float
    """Timeout of any single RPC. If the timeout is exceeded, the RPC will fail. The mission service
    treats each failed RPC differently:
    - EstablishSession: An error is returned in LoadMission.
    - Tick: The RPC is retried.
    - Stop: The error is ignored, and the RPC is not retried.
    Omit for a default of 60 seconds.
    """

    @property
    def lease_resources(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Resources that we will need leases on."""
        pass
    @property
    def inputs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[bosdyn.api.mission.util_pb2.KeyValue]:
        """The list of variables the remote host should receive.
        Variables given can be available at either run-time or compile-time.
        The "key" in KeyValue is the name of the variable as used by the remote system.
        """
        pass
    def __init__(self,
        *,
        host: typing.Text = ...,
        service_name: typing.Text = ...,
        timeout: builtins.float = ...,
        lease_resources: typing.Optional[typing.Iterable[typing.Text]] = ...,
        inputs: typing.Optional[typing.Iterable[bosdyn.api.mission.util_pb2.KeyValue]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["host",b"host","inputs",b"inputs","lease_resources",b"lease_resources","service_name",b"service_name","timeout",b"timeout"]) -> None: ...
global___RemoteGrpc = RemoteGrpc

class Sleep(google.protobuf.message.Message):
    """When started, begins a sleep timer for X seconds. Returns "success" after the timer elapses,
    "running" otherwise.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SECONDS_FIELD_NUMBER: builtins.int
    RESTART_AFTER_STOP_FIELD_NUMBER: builtins.int
    seconds: builtins.float
    """Number of seconds to sleep for."""

    restart_after_stop: builtins.bool
    """If this node is stopped, should it restart the timer?"""

    def __init__(self,
        *,
        seconds: builtins.float = ...,
        restart_after_stop: builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["restart_after_stop",b"restart_after_stop","seconds",b"seconds"]) -> None: ...
global___Sleep = Sleep

class Prompt(google.protobuf.message.Message):
    """Prompt the world at large to answer a question.
    This node represents a request for information from ANY listeners that may be out there.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class Option(google.protobuf.message.Message):
        """Data about the options to choose from."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        TEXT_FIELD_NUMBER: builtins.int
        ANSWER_CODE_FIELD_NUMBER: builtins.int
        text: typing.Text
        """Text associated with this option. Should be displayed to the user."""

        answer_code: builtins.int
        """Numeric code corresponding to this option. Passed as part of the answer."""

        def __init__(self,
            *,
            text: typing.Text = ...,
            answer_code: builtins.int = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["answer_code",b"answer_code","text",b"text"]) -> None: ...

    ALWAYS_REPROMPT_FIELD_NUMBER: builtins.int
    TEXT_FIELD_NUMBER: builtins.int
    SOURCE_FIELD_NUMBER: builtins.int
    OPTIONS_FIELD_NUMBER: builtins.int
    CHILD_FIELD_NUMBER: builtins.int
    FOR_AUTONOMOUS_PROCESSING_FIELD_NUMBER: builtins.int
    always_reprompt: builtins.bool
    """Should we always re-prompt when this node is started?
    If false, this node will only ever prompt if it is started and its question is unanswered.
    This may be used, for example, to ask the user to check the robot after any self-right.
    If true, this node will prompt whenever it is started.
    This may be used, for example, to tell the user to perform some one-time action, like open a
    door for the robot.
    """

    text: typing.Text
    """The text of the question itself.  The question text may contain formatted blackboard
    variables.  Please see the documentation in FormatBlackboard for more information
    about supported string formats.
    """

    source: typing.Text
    """Metadata describing the source of the question.
    The answer will be written into the state blackboard with this as the variable name.
    """

    @property
    def options(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Prompt.Option]:
        """The set of options that can be chosen for this prompt."""
        pass
    @property
    def child(self) -> global___Node:
        """Child node, run after the prompt has been responded to.
        Children will have access to the answer code provided by the response.
        """
        pass
    for_autonomous_processing: builtins.bool
    """Hint that Question posed by this Prompt is meant to be answered by some automated system.
    See the Question message for details.
    """

    def __init__(self,
        *,
        always_reprompt: builtins.bool = ...,
        text: typing.Text = ...,
        source: typing.Text = ...,
        options: typing.Optional[typing.Iterable[global___Prompt.Option]] = ...,
        child: typing.Optional[global___Node] = ...,
        for_autonomous_processing: builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["child",b"child"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["always_reprompt",b"always_reprompt","child",b"child","for_autonomous_processing",b"for_autonomous_processing","options",b"options","source",b"source","text",b"text"]) -> None: ...
global___Prompt = Prompt

class SpotCamPtz(google.protobuf.message.Message):
    """Point the PTZ to a specified orientation"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class AdjustParameters(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        LOCALIZATION_VARNAME_FIELD_NUMBER: builtins.int
        WAYPOINT_ID_FIELD_NUMBER: builtins.int
        WAYPOINT_TFORM_BODY_FIELD_NUMBER: builtins.int
        localization_varname: typing.Text
        """Variable name to retrieve the graph nav state from."""

        waypoint_id: typing.Text
        """Waypoint ID where this PTZ configuration was originally set up."""

        @property
        def waypoint_tform_body(self) -> bosdyn.api.geometry_pb2.SE3Pose:
            """Pose of body in waypoint frame at the time this PTZ configuration was originally set up."""
            pass
        def __init__(self,
            *,
            localization_varname: typing.Text = ...,
            waypoint_id: typing.Text = ...,
            waypoint_tform_body: typing.Optional[bosdyn.api.geometry_pb2.SE3Pose] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["waypoint_tform_body",b"waypoint_tform_body"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["localization_varname",b"localization_varname","waypoint_id",b"waypoint_id","waypoint_tform_body",b"waypoint_tform_body"]) -> None: ...

    SERVICE_NAME_FIELD_NUMBER: builtins.int
    HOST_FIELD_NUMBER: builtins.int
    PTZ_POSITION_FIELD_NUMBER: builtins.int
    ADJUST_PARAMETERS_FIELD_NUMBER: builtins.int
    service_name: typing.Text
    """Name of the service to use."""

    host: typing.Text
    """Host machine of the directory server that the Spot CAM registered with."""

    @property
    def ptz_position(self) -> bosdyn.api.spot_cam.ptz_pb2.PtzPosition:
        """The rest of the fields are from bosdyn.api.spot_cam.ptz.SetPtzPositionRequest, see that
        message for details.
        """
        pass
    @property
    def adjust_parameters(self) -> global___SpotCamPtz.AdjustParameters:
        """Setting adjust_parameters will enable auto-adjusting the PTZ pan and tilt at playback time,
        based on where the robot is, relative to the waypoint. Leave empty to disable auto-adjust
        features.
        """
        pass
    def __init__(self,
        *,
        service_name: typing.Text = ...,
        host: typing.Text = ...,
        ptz_position: typing.Optional[bosdyn.api.spot_cam.ptz_pb2.PtzPosition] = ...,
        adjust_parameters: typing.Optional[global___SpotCamPtz.AdjustParameters] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["adjust_parameters",b"adjust_parameters","ptz_position",b"ptz_position"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["adjust_parameters",b"adjust_parameters","host",b"host","ptz_position",b"ptz_position","service_name",b"service_name"]) -> None: ...
global___SpotCamPtz = SpotCamPtz

class SpotCamStoreMedia(google.protobuf.message.Message):
    """Store media using the Spot CAM."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SERVICE_NAME_FIELD_NUMBER: builtins.int
    HOST_FIELD_NUMBER: builtins.int
    CAMERA_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    TAG_FIELD_NUMBER: builtins.int
    service_name: typing.Text
    """Name of the service to use."""

    host: typing.Text
    """Host machine of the directory server that the Spot CAM registered with."""

    @property
    def camera(self) -> bosdyn.api.spot_cam.camera_pb2.Camera:
        """The rest of the fields are from bosdyn.api.spot_cam.logging.StoreRequest, see that message for
        details.
        """
        pass
    type: bosdyn.api.spot_cam.logging_pb2.Logpoint.RecordType.ValueType
    """What type of media should be stored from this action."""

    tag: typing.Text
    """Extra metadata to store alongside the captured media."""

    def __init__(self,
        *,
        service_name: typing.Text = ...,
        host: typing.Text = ...,
        camera: typing.Optional[bosdyn.api.spot_cam.camera_pb2.Camera] = ...,
        type: bosdyn.api.spot_cam.logging_pb2.Logpoint.RecordType.ValueType = ...,
        tag: typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["camera",b"camera"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["camera",b"camera","host",b"host","service_name",b"service_name","tag",b"tag","type",b"type"]) -> None: ...
global___SpotCamStoreMedia = SpotCamStoreMedia

class SpotCamLed(google.protobuf.message.Message):
    """Set the LEDs to a specified brightness"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class BrightnessesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int
        value: builtins.float
        def __init__(self,
            *,
            key: builtins.int = ...,
            value: builtins.float = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    SERVICE_NAME_FIELD_NUMBER: builtins.int
    HOST_FIELD_NUMBER: builtins.int
    BRIGHTNESSES_FIELD_NUMBER: builtins.int
    service_name: typing.Text
    """Name of the service to use."""

    host: typing.Text
    """Host machine of the directory server that the Spot CAM registered with."""

    @property
    def brightnesses(self) -> google.protobuf.internal.containers.ScalarMap[builtins.int, builtins.float]:
        """Brightnesses of the LEDs, from SetLEDBrightnessRequest"""
        pass
    def __init__(self,
        *,
        service_name: typing.Text = ...,
        host: typing.Text = ...,
        brightnesses: typing.Optional[typing.Mapping[builtins.int, builtins.float]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["brightnesses",b"brightnesses","host",b"host","service_name",b"service_name"]) -> None: ...
global___SpotCamLed = SpotCamLed

class SpotCamResetAutofocus(google.protobuf.message.Message):
    """Reset the autofocus on the Spot CAM PTZ"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SERVICE_NAME_FIELD_NUMBER: builtins.int
    HOST_FIELD_NUMBER: builtins.int
    service_name: typing.Text
    """Name of the service to use."""

    host: typing.Text
    """Host machine of the directory server that the Spot CAM registered with."""

    def __init__(self,
        *,
        service_name: typing.Text = ...,
        host: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["host",b"host","service_name",b"service_name"]) -> None: ...
global___SpotCamResetAutofocus = SpotCamResetAutofocus

class Dock(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SERVICE_NAME_FIELD_NUMBER: builtins.int
    HOST_FIELD_NUMBER: builtins.int
    DOCKING_STATION_ID_FIELD_NUMBER: builtins.int
    CHILD_FIELD_NUMBER: builtins.int
    COMMAND_STATUS_NAME_FIELD_NUMBER: builtins.int
    FEEDBACK_STATUS_NAME_FIELD_NUMBER: builtins.int
    PREP_POSE_BEHAVIOR_FIELD_NUMBER: builtins.int
    DOCKING_COMMAND_FEEDBACK_RESPONSE_BLACKBOARD_KEY_FIELD_NUMBER: builtins.int
    DOCKING_COMMAND_RESPONSE_BLACKBOARD_KEY_FIELD_NUMBER: builtins.int
    service_name: typing.Text
    """Name of the service to use."""

    host: typing.Text
    """Host machine of the directory server that the docking service is registered with."""

    docking_station_id: builtins.int
    """ID of docking station to dock at."""

    @property
    def child(self) -> global___Node:
        """Optional child node. Children will have access to the status variables gathered by this node.
        If specified, child node will determine success/failure of this node.

        DEPRECATED!  Use docking_command_response_blackboard_key and
        docking_command_feedback_response_blackboard_key instead.
        """
        pass
    command_status_name: typing.Text
    """Name of the command status variable in the blackboard.  This is the status of the docking
    command request made to the robot.  Please refer to
    bosdyn.api.docking.DockingCommandResponse.Status for more details.  Children can use this
    name to look up docking command status in the blackboard. If no name is provided, status will
    not be available.

    DEPRECATED!  Use docking_command_response_blackboard_key and
    docking_command_feedback_response_blackboard_key instead.
    """

    feedback_status_name: typing.Text
    """Name of the feedback status variable in the blackboard.  This is the feedback provided while
    docking is in progress.  Please refer to bosdyn.api.docking.DockingCommandFeedbackResponse.Status
    for a list of possible status values.  Children can use this name to look up docking status
    in the blackboard. If no name is provided, status will not be available.

    DEPRECATED!  Use docking_command_response_blackboard_key and
    docking_command_feedback_response_blackboard_key instead.
    """

    prep_pose_behavior: bosdyn.api.docking.docking_pb2.PrepPoseBehavior.ValueType
    """Defines how we use the "pre-docking" behavior."""

    docking_command_feedback_response_blackboard_key: typing.Text
    """If provided, this will write the last DockingCommandFeedbackResponse message
    to a blackboard variable with this name.
    """

    docking_command_response_blackboard_key: typing.Text
    """If provided, this will write the last DockingCommandResponse message to
    a blackboard variable with this name.
    """

    def __init__(self,
        *,
        service_name: typing.Text = ...,
        host: typing.Text = ...,
        docking_station_id: builtins.int = ...,
        child: typing.Optional[global___Node] = ...,
        command_status_name: typing.Text = ...,
        feedback_status_name: typing.Text = ...,
        prep_pose_behavior: bosdyn.api.docking.docking_pb2.PrepPoseBehavior.ValueType = ...,
        docking_command_feedback_response_blackboard_key: typing.Text = ...,
        docking_command_response_blackboard_key: typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["child",b"child"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["child",b"child","command_status_name",b"command_status_name","docking_command_feedback_response_blackboard_key",b"docking_command_feedback_response_blackboard_key","docking_command_response_blackboard_key",b"docking_command_response_blackboard_key","docking_station_id",b"docking_station_id","feedback_status_name",b"feedback_status_name","host",b"host","prep_pose_behavior",b"prep_pose_behavior","service_name",b"service_name"]) -> None: ...
global___Dock = Dock

class StoreMetadata(google.protobuf.message.Message):
    """Triggers a StoreMetadataRequest to the data acquisition store."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SERVICE_NAME_FIELD_NUMBER: builtins.int
    HOST_FIELD_NUMBER: builtins.int
    ACQUIRE_DATA_REQUEST_NAME_FIELD_NUMBER: builtins.int
    METADATA_NAME_FIELD_NUMBER: builtins.int
    METADATA_CHANNEL_FIELD_NUMBER: builtins.int
    service_name: typing.Text
    """Name of the service to use."""

    host: typing.Text
    """Host machine of the directory server that the data acquisition service is registered with."""

    acquire_data_request_name: typing.Text
    """The name of the blackboard variable that holds the associated AcquireDataRequest. The
    reference ID that this metadata is associated with will be copied from the request.
    """

    metadata_name: typing.Text
    """The name of the metadata object in the blackboard to be stored.
    The metadata object can be any protobuf message.
    """

    metadata_channel: typing.Text
    """The data buffer channel on which to store the metadata."""

    def __init__(self,
        *,
        service_name: typing.Text = ...,
        host: typing.Text = ...,
        acquire_data_request_name: typing.Text = ...,
        metadata_name: typing.Text = ...,
        metadata_channel: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["acquire_data_request_name",b"acquire_data_request_name","host",b"host","metadata_channel",b"metadata_channel","metadata_name",b"metadata_name","service_name",b"service_name"]) -> None: ...
global___StoreMetadata = StoreMetadata

class DataAcquisition(google.protobuf.message.Message):
    """Trigger the acquisition and storage of data."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class _CompletionBehavior:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _CompletionBehaviorEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[DataAcquisition._CompletionBehavior.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        COMPLETE_UNKNOWN: DataAcquisition._CompletionBehavior.ValueType  # 0
        COMPLETE_AFTER_SAVED: DataAcquisition._CompletionBehavior.ValueType  # 1
        """Node is complete after all data has been saved."""

        COMPLETE_AFTER_ACQUIRED: DataAcquisition._CompletionBehavior.ValueType  # 2
        """Node is complete after all data is acquired, but before processing and storage.
        This allows the robot to continue on with the mission sooner, but
        it will be unaware of failures in processing or storage.
        """

    class CompletionBehavior(_CompletionBehavior, metaclass=_CompletionBehaviorEnumTypeWrapper):
        pass

    COMPLETE_UNKNOWN: DataAcquisition.CompletionBehavior.ValueType  # 0
    COMPLETE_AFTER_SAVED: DataAcquisition.CompletionBehavior.ValueType  # 1
    """Node is complete after all data has been saved."""

    COMPLETE_AFTER_ACQUIRED: DataAcquisition.CompletionBehavior.ValueType  # 2
    """Node is complete after all data is acquired, but before processing and storage.
    This allows the robot to continue on with the mission sooner, but
    it will be unaware of failures in processing or storage.
    """


    SERVICE_NAME_FIELD_NUMBER: builtins.int
    HOST_FIELD_NUMBER: builtins.int
    REQUEST_FIELD_NUMBER: builtins.int
    COMPLETION_BEHAVIOR_FIELD_NUMBER: builtins.int
    GROUP_NAME_FORMAT_FIELD_NUMBER: builtins.int
    REQUEST_NAME_IN_BLACKBOARD_FIELD_NUMBER: builtins.int
    service_name: typing.Text
    """Name of the service to use."""

    host: typing.Text
    """Host machine of the directory server that the data acquisition service is registered with."""

    @property
    def request(self) -> bosdyn.api.data_acquisition_pb2.AcquireDataRequest:
        """Specification of the data and metadata to store."""
        pass
    completion_behavior: global___DataAcquisition.CompletionBehavior.ValueType
    group_name_format: typing.Text
    """Define a format string that will be used together with the blackboard to generate
    a group name.  Values from the blackboard will replace the keys in braces {}.
    Example: "telop-{date}", where "date" is a blackboard variable.
    Example: "{date}_loop_{loop_counter}", where "loop_counter" is a blackboard variable from a Repeat.
    """

    request_name_in_blackboard: typing.Text
    """If populated, name of the variable in the blackboard in which to store the AcquireDataRequest."""

    def __init__(self,
        *,
        service_name: typing.Text = ...,
        host: typing.Text = ...,
        request: typing.Optional[bosdyn.api.data_acquisition_pb2.AcquireDataRequest] = ...,
        completion_behavior: global___DataAcquisition.CompletionBehavior.ValueType = ...,
        group_name_format: typing.Text = ...,
        request_name_in_blackboard: typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["request",b"request"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["completion_behavior",b"completion_behavior","group_name_format",b"group_name_format","host",b"host","request",b"request","request_name_in_blackboard",b"request_name_in_blackboard","service_name",b"service_name"]) -> None: ...
global___DataAcquisition = DataAcquisition

class RetainLease(google.protobuf.message.Message):
    """Send RetainLease for every Lease the mission service is given via PlayMissionRequest.
    Returns RUNNING while there are more leases to retain, SUCCESS once a lease for each resource has
    been retained, and FAILURE if any one lease cannot be retained.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SERVICE_NAME_FIELD_NUMBER: builtins.int
    HOST_FIELD_NUMBER: builtins.int
    service_name: typing.Text
    """Name of the service to use."""

    host: typing.Text
    """Host machine of the directory server that the lease service is registered with."""

    def __init__(self,
        *,
        service_name: typing.Text = ...,
        host: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["host",b"host","service_name",b"service_name"]) -> None: ...
global___RetainLease = RetainLease

class DefineBlackboard(google.protobuf.message.Message):
    """Defines new blackboard variables within the scope of the child. Shadows blackboard
    variables in the parent scope.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    BLACKBOARD_VARIABLES_FIELD_NUMBER: builtins.int
    CHILD_FIELD_NUMBER: builtins.int
    @property
    def blackboard_variables(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[bosdyn.api.mission.util_pb2.KeyValue]:
        """The list of variables that should be defined for this subtree,
        with initial values.
        """
        pass
    @property
    def child(self) -> global___Node:
        """The blackboard variables will only persist in the subtree defined by this
        child node. The child's tick() will be called on the child until it
        returns either SUCCESS or FAILURE.
        """
        pass
    def __init__(self,
        *,
        blackboard_variables: typing.Optional[typing.Iterable[bosdyn.api.mission.util_pb2.KeyValue]] = ...,
        child: typing.Optional[global___Node] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["child",b"child"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["blackboard_variables",b"blackboard_variables","child",b"child"]) -> None: ...
global___DefineBlackboard = DefineBlackboard

class SetBlackboard(google.protobuf.message.Message):
    """Sets existing blackboard variables within this scope to specific values, returning SUCCESS."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    BLACKBOARD_VARIABLES_FIELD_NUMBER: builtins.int
    @property
    def blackboard_variables(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[bosdyn.api.mission.util_pb2.KeyValue]:
        """The key of the KeyValue is the name of the blackboard variable.
        The value will be dereferenced and converted into a value type at runtime
        inside this node's tick function. For example, if the value is a runtime
        variable, that variable will be evaluated at tick time, and then stored into
        the blackboard. If the value is another blackboard variable, that blackboard
        variable's value will be copied into the variable specified by the key.
        """
        pass
    def __init__(self,
        *,
        blackboard_variables: typing.Optional[typing.Iterable[bosdyn.api.mission.util_pb2.KeyValue]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["blackboard_variables",b"blackboard_variables"]) -> None: ...
global___SetBlackboard = SetBlackboard

class FormatBlackboard(google.protobuf.message.Message):
    """Sets a blackboard variable to a formatted string, reading from other blackboard vars."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    KEY_FIELD_NUMBER: builtins.int
    FORMAT_FIELD_NUMBER: builtins.int
    key: typing.Text
    """The key of the variable that will be written."""

    format: typing.Text
    """Define a format string that will be used together with the blackboard to generate
    string value.  Values from the blackboard will replace the keys in braces {}, i.e.
    {blackboard_variable_name}.  We also allow some string formatting options, namely:

    1) Floating point decimal places: {float_variable:.2f}
    2) TBD

    Select examples:

    Format String: "telop-{date}"
       Blackboard: "date" is a blackboard variable with string value: "2021-05-13"
           Output: "teleop-2021-05-13"

    Format String: "{date}_loop_{loop_counter}"
       Blackboard: "date" is a blackboard variable with string value: "2021-05-13"
       Blackboard: "loop_counter" is a blackboard variable with integer value: "3"
           Output: "2021-05-13_loop_3"

    Format String: "battery charge is: {state.power_state.locomotion_charge_percentage.value}"
       Blackboard: "state" is a protobuf message in the blackboard from a BosdynRobotState, and
                   the power_state submessage has a charge percentage of 30.2148320923085
           Output: "battery charge is: 30.2158320923085"

    Format String: "battery charge is: {state.power_state.locomotion_charge_percentage.value:.2f}"
       Blackboard: "state" is a protobuf message in the blackboard from a BosdynRobotState, and
                   the power_state submessage has a charge percentage of 30.2148320923085
           Output: "battery charge is: 30.21"

    Format String: "the value is {x:.0f}"
       Blackboard: "x" is a blackboard variable with float value: "2.71828"
           Output: "the value is 3"
    """

    def __init__(self,
        *,
        key: typing.Text = ...,
        format: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["format",b"format","key",b"key"]) -> None: ...
global___FormatBlackboard = FormatBlackboard

class DateToBlackboard(google.protobuf.message.Message):
    """Record a datetime string into the blackboard. Writes the date according to ISO8601 format."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    KEY_FIELD_NUMBER: builtins.int
    key: typing.Text
    """The key of the variable that will be written."""

    def __init__(self,
        *,
        key: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["key",b"key"]) -> None: ...
global___DateToBlackboard = DateToBlackboard

class ConstantResult(google.protobuf.message.Message):
    """Just returns a constant when calling tick()."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    RESULT_FIELD_NUMBER: builtins.int
    result: bosdyn.api.mission.util_pb2.Result.ValueType
    """This result is always returned when calling tick()."""

    def __init__(self,
        *,
        result: bosdyn.api.mission.util_pb2.Result.ValueType = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["result",b"result"]) -> None: ...
global___ConstantResult = ConstantResult

class RestartWhenPaused(google.protobuf.message.Message):
    """This node will run and return the status of the child node.
    If the mission is paused while this node is executing, the child will be
    restarted when the mission is resumed.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CHILD_FIELD_NUMBER: builtins.int
    @property
    def child(self) -> global___Node: ...
    def __init__(self,
        *,
        child: typing.Optional[global___Node] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["child",b"child"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["child",b"child"]) -> None: ...
global___RestartWhenPaused = RestartWhenPaused
