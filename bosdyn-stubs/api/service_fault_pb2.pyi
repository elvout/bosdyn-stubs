"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import bosdyn.api.header_pb2
import builtins
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class ServiceFaultId(google.protobuf.message.Message):
    """Information necessary to uniquely specify a service fault.
    A service fault typically is associated with a service running on the robot or a
    payload. Occassionally, the fault may pertain to a payload but no specific service
    on the payload. In that situation, no service_name should not be specified and instead
    a payload_guid should be specified. Otherwise, in the standard case of a service
    originating fault, only the service_name should be specified and the payload_guid
    will be populated automatically by the fault service on robot.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    FAULT_NAME_FIELD_NUMBER: builtins.int
    SERVICE_NAME_FIELD_NUMBER: builtins.int
    PAYLOAD_GUID_FIELD_NUMBER: builtins.int
    fault_name: typing.Text
    """Name of the fault."""

    service_name: typing.Text
    """Name of the registered service associated with the fault.
    Optional. Service name does not need to be specified if this is a payload-level
    fault with no associated service.
    """

    payload_guid: typing.Text
    """GUID of the payload associated with the faulted service.
    Optional. If not set, it will be assigned to the payload associated with the
    service_name.
    """

    def __init__(self,
        *,
        fault_name: typing.Text = ...,
        service_name: typing.Text = ...,
        payload_guid: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["fault_name",b"fault_name","payload_guid",b"payload_guid","service_name",b"service_name"]) -> None: ...
global___ServiceFaultId = ServiceFaultId

class ServiceFault(google.protobuf.message.Message):
    """The current service faults for services registered with the robot.
    A fault is an indicator of a problem with a service or payload registered
    with the robot. An active fault may indicate a service may fail to comply
    with a user request.
    If the name, service_name, and payload_guid of a newly triggered ServiceFault matches an
    already active ServiceFault the new fault will not be added to the active fault list.
    The oldest matching fault will be maintained.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class _Severity:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _SeverityEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[ServiceFault._Severity.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        SEVERITY_UNKNOWN: ServiceFault._Severity.ValueType  # 0
        """Unknown severity"""

        SEVERITY_INFO: ServiceFault._Severity.ValueType  # 1
        """Service still functional"""

        SEVERITY_WARN: ServiceFault._Severity.ValueType  # 2
        """Service performance may be degraded"""

        SEVERITY_CRITICAL: ServiceFault._Severity.ValueType  # 3
        """Critical service fault"""

    class Severity(_Severity, metaclass=_SeverityEnumTypeWrapper):
        pass

    SEVERITY_UNKNOWN: ServiceFault.Severity.ValueType  # 0
    """Unknown severity"""

    SEVERITY_INFO: ServiceFault.Severity.ValueType  # 1
    """Service still functional"""

    SEVERITY_WARN: ServiceFault.Severity.ValueType  # 2
    """Service performance may be degraded"""

    SEVERITY_CRITICAL: ServiceFault.Severity.ValueType  # 3
    """Critical service fault"""


    FAULT_ID_FIELD_NUMBER: builtins.int
    ERROR_MESSAGE_FIELD_NUMBER: builtins.int
    ATTRIBUTES_FIELD_NUMBER: builtins.int
    SEVERITY_FIELD_NUMBER: builtins.int
    ONSET_TIMESTAMP_FIELD_NUMBER: builtins.int
    DURATION_FIELD_NUMBER: builtins.int
    @property
    def fault_id(self) -> global___ServiceFaultId:
        """Identifying information of the fault."""
        pass
    error_message: typing.Text
    """User visible description of the fault (and possibly remedies). Will be
    displayed on tablet.
    """

    @property
    def attributes(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Fault attributes
        Each fault may be flagged with attribute metadata (strings in this case.)
        These attributes are useful to communicate that a particular fault may
        have significant effect on the operations of services. Some potential attributes
        may be "autowalk", "Spot CORE", "vision", or "gauge detection". These
        attributes enable the caller to flag a fault as indicating a problem with
        particular robot abstractions. A fault may have, zero, one, or more
        attributes attached to it.
        """
        pass
    severity: global___ServiceFault.Severity.ValueType
    """The severity level will have some indication of the potential breakage
    resulting from the fault. For example, a fault associated with payload
    X and severity level SEVERITY_INFO may indicate the payload is in an
    unexpected state but still operational. However, a fault with serverity
    level SEVERITY_CRITICAL may indicate the payload is no
    longer operational.
    """

    @property
    def onset_timestamp(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time of robot local clock at fault onset. Set by robot-state service."""
        pass
    @property
    def duration(self) -> google.protobuf.duration_pb2.Duration:
        """Time elapsed since onset of the fault. Set by robot-state service."""
        pass
    def __init__(self,
        *,
        fault_id: typing.Optional[global___ServiceFaultId] = ...,
        error_message: typing.Text = ...,
        attributes: typing.Optional[typing.Iterable[typing.Text]] = ...,
        severity: global___ServiceFault.Severity.ValueType = ...,
        onset_timestamp: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        duration: typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["duration",b"duration","fault_id",b"fault_id","onset_timestamp",b"onset_timestamp"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["attributes",b"attributes","duration",b"duration","error_message",b"error_message","fault_id",b"fault_id","onset_timestamp",b"onset_timestamp","severity",b"severity"]) -> None: ...
global___ServiceFault = ServiceFault

class TriggerServiceFaultRequest(google.protobuf.message.Message):
    """Trigger a new service fault that will be reported in the robot ServiceFaultState.
    These faults will be displayed in the tablet. Developers should be careful to
    avoid overwhelming operators with dozens of minor messages.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    HEADER_FIELD_NUMBER: builtins.int
    FAULT_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> bosdyn.api.header_pb2.RequestHeader:
        """Common request header."""
        pass
    @property
    def fault(self) -> global___ServiceFault:
        """The fault to report in ServiceFaultState."""
        pass
    def __init__(self,
        *,
        header: typing.Optional[bosdyn.api.header_pb2.RequestHeader] = ...,
        fault: typing.Optional[global___ServiceFault] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["fault",b"fault","header",b"header"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["fault",b"fault","header",b"header"]) -> None: ...
global___TriggerServiceFaultRequest = TriggerServiceFaultRequest

class TriggerServiceFaultResponse(google.protobuf.message.Message):
    """The TriggerServiceFault response message contains a header indicating success."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class _Status:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _StatusEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[TriggerServiceFaultResponse._Status.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        STATUS_UNKNOWN: TriggerServiceFaultResponse._Status.ValueType  # 0
        """UNKNOWN should never be used."""

        STATUS_OK: TriggerServiceFaultResponse._Status.ValueType  # 1
        """Success. The fault has been triggerd."""

        STATUS_FAULT_ALREADY_ACTIVE: TriggerServiceFaultResponse._Status.ValueType  # 2
        """ServiceFaultId already in active faults."""

    class Status(_Status, metaclass=_StatusEnumTypeWrapper):
        pass

    STATUS_UNKNOWN: TriggerServiceFaultResponse.Status.ValueType  # 0
    """UNKNOWN should never be used."""

    STATUS_OK: TriggerServiceFaultResponse.Status.ValueType  # 1
    """Success. The fault has been triggerd."""

    STATUS_FAULT_ALREADY_ACTIVE: TriggerServiceFaultResponse.Status.ValueType  # 2
    """ServiceFaultId already in active faults."""


    HEADER_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> bosdyn.api.header_pb2.ResponseHeader:
        """Common response header."""
        pass
    status: global___TriggerServiceFaultResponse.Status.ValueType
    """Return status for the request."""

    def __init__(self,
        *,
        header: typing.Optional[bosdyn.api.header_pb2.ResponseHeader] = ...,
        status: global___TriggerServiceFaultResponse.Status.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["header",b"header"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["header",b"header","status",b"status"]) -> None: ...
global___TriggerServiceFaultResponse = TriggerServiceFaultResponse

class ClearServiceFaultRequest(google.protobuf.message.Message):
    """Clear a service fault from the robot's ServiceFaultState (in robot_state.proto).
    The active ServiceFault to clear will be determined by matching fault_name and
    service_name/payload_guid, specified in the ServiceFaultId message.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    HEADER_FIELD_NUMBER: builtins.int
    FAULT_ID_FIELD_NUMBER: builtins.int
    CLEAR_ALL_SERVICE_FAULTS_FIELD_NUMBER: builtins.int
    CLEAR_ALL_PAYLOAD_FAULTS_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> bosdyn.api.header_pb2.RequestHeader:
        """Common request header."""
        pass
    @property
    def fault_id(self) -> global___ServiceFaultId:
        """Identifying information of the fault to clear."""
        pass
    clear_all_service_faults: builtins.bool
    """Clear all faults that are associated with the same service_name. Use carefully."""

    clear_all_payload_faults: builtins.bool
    """Clear all faults that are associated with the same payload_guid. Use carefully."""

    def __init__(self,
        *,
        header: typing.Optional[bosdyn.api.header_pb2.RequestHeader] = ...,
        fault_id: typing.Optional[global___ServiceFaultId] = ...,
        clear_all_service_faults: builtins.bool = ...,
        clear_all_payload_faults: builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["fault_id",b"fault_id","header",b"header"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["clear_all_payload_faults",b"clear_all_payload_faults","clear_all_service_faults",b"clear_all_service_faults","fault_id",b"fault_id","header",b"header"]) -> None: ...
global___ClearServiceFaultRequest = ClearServiceFaultRequest

class ClearServiceFaultResponse(google.protobuf.message.Message):
    """The ClearServiceFault response message contains a header indicating success."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class _Status:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _StatusEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[ClearServiceFaultResponse._Status.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        STATUS_UNKNOWN: ClearServiceFaultResponse._Status.ValueType  # 0
        """UNKNOWN should never be used."""

        STATUS_OK: ClearServiceFaultResponse._Status.ValueType  # 1
        """Success. The fault has been cleared."""

        STATUS_FAULT_NOT_ACTIVE: ClearServiceFaultResponse._Status.ValueType  # 2
        """ServiceFaultId not found in active faults."""

    class Status(_Status, metaclass=_StatusEnumTypeWrapper):
        pass

    STATUS_UNKNOWN: ClearServiceFaultResponse.Status.ValueType  # 0
    """UNKNOWN should never be used."""

    STATUS_OK: ClearServiceFaultResponse.Status.ValueType  # 1
    """Success. The fault has been cleared."""

    STATUS_FAULT_NOT_ACTIVE: ClearServiceFaultResponse.Status.ValueType  # 2
    """ServiceFaultId not found in active faults."""


    HEADER_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> bosdyn.api.header_pb2.ResponseHeader:
        """Common response header."""
        pass
    status: global___ClearServiceFaultResponse.Status.ValueType
    """Return status for the request."""

    def __init__(self,
        *,
        header: typing.Optional[bosdyn.api.header_pb2.ResponseHeader] = ...,
        status: global___ClearServiceFaultResponse.Status.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["header",b"header"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["header",b"header","status",b"status"]) -> None: ...
global___ClearServiceFaultResponse = ClearServiceFaultResponse
