"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import bosdyn.api.header_pb2
import bosdyn.api.image_pb2
import bosdyn.api.world_object_pb2
import builtins
import google.protobuf.any_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _NetworkComputeStatus:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _NetworkComputeStatusEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_NetworkComputeStatus.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    NETWORK_COMPUTE_STATUS_UNKNOWN: _NetworkComputeStatus.ValueType  # 0
    """Status is not specified."""

    NETWORK_COMPUTE_STATUS_SUCCESS: _NetworkComputeStatus.ValueType  # 1
    """Succeeded."""

    NETWORK_COMPUTE_STATUS_EXTERNAL_SERVICE_NOT_FOUND: _NetworkComputeStatus.ValueType  # 2
    """External service not found in the robot's directory."""

    NETWORK_COMPUTE_STATUS_EXTERNAL_SERVER_ERROR: _NetworkComputeStatus.ValueType  # 3
    """The call to the external server did not succeed."""

    NETWORK_COMPUTE_STATUS_ROTATION_ERROR: _NetworkComputeStatus.ValueType  # 4
    """The robot failed to rotate the image as requested."""

class NetworkComputeStatus(_NetworkComputeStatus, metaclass=_NetworkComputeStatusEnumTypeWrapper):
    pass

NETWORK_COMPUTE_STATUS_UNKNOWN: NetworkComputeStatus.ValueType  # 0
"""Status is not specified."""

NETWORK_COMPUTE_STATUS_SUCCESS: NetworkComputeStatus.ValueType  # 1
"""Succeeded."""

NETWORK_COMPUTE_STATUS_EXTERNAL_SERVICE_NOT_FOUND: NetworkComputeStatus.ValueType  # 2
"""External service not found in the robot's directory."""

NETWORK_COMPUTE_STATUS_EXTERNAL_SERVER_ERROR: NetworkComputeStatus.ValueType  # 3
"""The call to the external server did not succeed."""

NETWORK_COMPUTE_STATUS_ROTATION_ERROR: NetworkComputeStatus.ValueType  # 4
"""The robot failed to rotate the image as requested."""

global___NetworkComputeStatus = NetworkComputeStatus


class _ListAvailableModelsStatus:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _ListAvailableModelsStatusEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ListAvailableModelsStatus.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    LIST_AVAILABLE_MODELS_STATUS_UNKNOWN: _ListAvailableModelsStatus.ValueType  # 0
    """Status is not specified."""

    LIST_AVAILABLE_MODELS_STATUS_SUCCESS: _ListAvailableModelsStatus.ValueType  # 1
    """Succeeded."""

    LIST_AVAILABLE_MODELS_STATUS_EXTERNAL_SERVICE_NOT_FOUND: _ListAvailableModelsStatus.ValueType  # 2
    """External service not found in the robot's directory."""

    LIST_AVAILABLE_MODELS_STATUS_EXTERNAL_SERVER_ERROR: _ListAvailableModelsStatus.ValueType  # 3
    """The call to the external server did not succeed."""

class ListAvailableModelsStatus(_ListAvailableModelsStatus, metaclass=_ListAvailableModelsStatusEnumTypeWrapper):
    pass

LIST_AVAILABLE_MODELS_STATUS_UNKNOWN: ListAvailableModelsStatus.ValueType  # 0
"""Status is not specified."""

LIST_AVAILABLE_MODELS_STATUS_SUCCESS: ListAvailableModelsStatus.ValueType  # 1
"""Succeeded."""

LIST_AVAILABLE_MODELS_STATUS_EXTERNAL_SERVICE_NOT_FOUND: ListAvailableModelsStatus.ValueType  # 2
"""External service not found in the robot's directory."""

LIST_AVAILABLE_MODELS_STATUS_EXTERNAL_SERVER_ERROR: ListAvailableModelsStatus.ValueType  # 3
"""The call to the external server did not succeed."""

global___ListAvailableModelsStatus = ListAvailableModelsStatus


class ListAvailableModelsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    HEADER_FIELD_NUMBER: builtins.int
    SERVER_CONFIG_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> bosdyn.api.header_pb2.RequestHeader:
        """Common request header"""
        pass
    @property
    def server_config(self) -> global___NetworkComputeServerConfiguration:
        """Configuration about which server to use."""
        pass
    def __init__(self,
        *,
        header: typing.Optional[bosdyn.api.header_pb2.RequestHeader] = ...,
        server_config: typing.Optional[global___NetworkComputeServerConfiguration] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["header",b"header","server_config",b"server_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["header",b"header","server_config",b"server_config"]) -> None: ...
global___ListAvailableModelsRequest = ListAvailableModelsRequest

class ListAvailableModelsResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    HEADER_FIELD_NUMBER: builtins.int
    AVAILABLE_MODELS_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> bosdyn.api.header_pb2.ResponseHeader:
        """Common response header."""
        pass
    @property
    def available_models(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Provide list of available models"""
        pass
    @property
    def labels(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ModelLabels]:
        """Optional information about available classes for each model"""
        pass
    status: global___ListAvailableModelsStatus.ValueType
    """Command status"""

    def __init__(self,
        *,
        header: typing.Optional[bosdyn.api.header_pb2.ResponseHeader] = ...,
        available_models: typing.Optional[typing.Iterable[typing.Text]] = ...,
        labels: typing.Optional[typing.Iterable[global___ModelLabels]] = ...,
        status: global___ListAvailableModelsStatus.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["header",b"header"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["available_models",b"available_models","header",b"header","labels",b"labels","status",b"status"]) -> None: ...
global___ListAvailableModelsResponse = ListAvailableModelsResponse

class ModelLabels(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    MODEL_NAME_FIELD_NUMBER: builtins.int
    AVAILABLE_LABELS_FIELD_NUMBER: builtins.int
    model_name: typing.Text
    """Model name."""

    @property
    def available_labels(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """List of class labels returned by this model."""
        pass
    def __init__(self,
        *,
        model_name: typing.Text = ...,
        available_labels: typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["available_labels",b"available_labels","model_name",b"model_name"]) -> None: ...
global___ModelLabels = ModelLabels

class NetworkComputeRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    HEADER_FIELD_NUMBER: builtins.int
    INPUT_DATA_FIELD_NUMBER: builtins.int
    SERVER_CONFIG_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> bosdyn.api.header_pb2.RequestHeader:
        """Common request header."""
        pass
    @property
    def input_data(self) -> global___NetworkComputeInputData:
        """Input data."""
        pass
    @property
    def server_config(self) -> global___NetworkComputeServerConfiguration:
        """Configuration about which server to use."""
        pass
    def __init__(self,
        *,
        header: typing.Optional[bosdyn.api.header_pb2.RequestHeader] = ...,
        input_data: typing.Optional[global___NetworkComputeInputData] = ...,
        server_config: typing.Optional[global___NetworkComputeServerConfiguration] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["header",b"header","input_data",b"input_data","server_config",b"server_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["header",b"header","input_data",b"input_data","server_config",b"server_config"]) -> None: ...
global___NetworkComputeRequest = NetworkComputeRequest

class ImageSourceAndService(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    IMAGE_SOURCE_FIELD_NUMBER: builtins.int
    IMAGE_SERVICE_FIELD_NUMBER: builtins.int
    image_source: typing.Text
    """Image source."""

    image_service: typing.Text
    """Image service.  If blank, it is assumed to be the robot's default image service."""

    def __init__(self,
        *,
        image_source: typing.Text = ...,
        image_service: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["image_service",b"image_service","image_source",b"image_source"]) -> None: ...
global___ImageSourceAndService = ImageSourceAndService

class NetworkComputeInputData(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class _RotateImage:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _RotateImageEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[NetworkComputeInputData._RotateImage.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        ROTATE_IMAGE_UNKNOWN: NetworkComputeInputData._RotateImage.ValueType  # 0
        """Unspecified rotation method. Do not use."""

        ROTATE_IMAGE_NO_ROTATION: NetworkComputeInputData._RotateImage.ValueType  # 3
        """No rotation applied."""

        ROTATE_IMAGE_ALIGN_HORIZONTAL: NetworkComputeInputData._RotateImage.ValueType  # 1
        """Rotate the images so the horizon is not rolled with respect to gravity."""

        ROTATE_IMAGE_ALIGN_WITH_BODY: NetworkComputeInputData._RotateImage.ValueType  # 2
        """Rotate the images so that the horizon in the image is aligned with the inclination of
        the body. For example, when applied to the left body camera this option rotates the image
        so that the world does not appear upside down when the robot is standing upright, but if the
        body is pitched up, the image will appear rotated.
        """

    class RotateImage(_RotateImage, metaclass=_RotateImageEnumTypeWrapper):
        pass

    ROTATE_IMAGE_UNKNOWN: NetworkComputeInputData.RotateImage.ValueType  # 0
    """Unspecified rotation method. Do not use."""

    ROTATE_IMAGE_NO_ROTATION: NetworkComputeInputData.RotateImage.ValueType  # 3
    """No rotation applied."""

    ROTATE_IMAGE_ALIGN_HORIZONTAL: NetworkComputeInputData.RotateImage.ValueType  # 1
    """Rotate the images so the horizon is not rolled with respect to gravity."""

    ROTATE_IMAGE_ALIGN_WITH_BODY: NetworkComputeInputData.RotateImage.ValueType  # 2
    """Rotate the images so that the horizon in the image is aligned with the inclination of
    the body. For example, when applied to the left body camera this option rotates the image
    so that the world does not appear upside down when the robot is standing upright, but if the
    body is pitched up, the image will appear rotated.
    """


    IMAGE_SOURCE_AND_SERVICE_FIELD_NUMBER: builtins.int
    IMAGE_FIELD_NUMBER: builtins.int
    OTHER_DATA_FIELD_NUMBER: builtins.int
    MODEL_NAME_FIELD_NUMBER: builtins.int
    MIN_CONFIDENCE_FIELD_NUMBER: builtins.int
    ROTATE_IMAGE_FIELD_NUMBER: builtins.int
    @property
    def image_source_and_service(self) -> global___ImageSourceAndService:
        """Image source to collect an image from."""
        pass
    @property
    def image(self) -> bosdyn.api.image_pb2.Image:
        """Image to process, if you are not using an image source."""
        pass
    @property
    def other_data(self) -> google.protobuf.any_pb2.Any:
        """Other data that isn't an image.  NetworkComputeBridge service will pass it through
        to the remote server so you can do computation on arbitrary data.
        """
        pass
    model_name: typing.Text
    """Name of the model to be run on the input data."""

    min_confidence: builtins.float
    """Minimum confidence [0.0 - 1.0] an object must have to be returned. Detections below this
    confidence threshold will be suppressed in the response.
    """

    rotate_image: global___NetworkComputeInputData.RotateImage.ValueType
    """Options for rotating the image before processing. When unset, no rotation is applied.
    Rotation is supported for data from image services that provide a FrameTreeSnapshot
    defining the sensor's frame with respect to Spot's body and vision frames.
    Field is ignored for non-image input.
    """

    def __init__(self,
        *,
        image_source_and_service: typing.Optional[global___ImageSourceAndService] = ...,
        image: typing.Optional[bosdyn.api.image_pb2.Image] = ...,
        other_data: typing.Optional[google.protobuf.any_pb2.Any] = ...,
        model_name: typing.Text = ...,
        min_confidence: builtins.float = ...,
        rotate_image: global___NetworkComputeInputData.RotateImage.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["image",b"image","image_source_and_service",b"image_source_and_service","input",b"input","other_data",b"other_data"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["image",b"image","image_source_and_service",b"image_source_and_service","input",b"input","min_confidence",b"min_confidence","model_name",b"model_name","other_data",b"other_data","rotate_image",b"rotate_image"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["input",b"input"]) -> typing.Optional[typing_extensions.Literal["image_source_and_service","image"]]: ...
global___NetworkComputeInputData = NetworkComputeInputData

class NetworkComputeServerConfiguration(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SERVICE_NAME_FIELD_NUMBER: builtins.int
    service_name: typing.Text
    """Service name in the robot's Directory for the worker that will process the request."""

    def __init__(self,
        *,
        service_name: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["service_name",b"service_name"]) -> None: ...
global___NetworkComputeServerConfiguration = NetworkComputeServerConfiguration

class NetworkComputeResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    HEADER_FIELD_NUMBER: builtins.int
    OBJECT_IN_IMAGE_FIELD_NUMBER: builtins.int
    IMAGE_RESPONSE_FIELD_NUMBER: builtins.int
    IMAGE_ROTATION_ANGLE_FIELD_NUMBER: builtins.int
    OTHER_DATA_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> bosdyn.api.header_pb2.ResponseHeader:
        """Common response header."""
        pass
    @property
    def object_in_image(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[bosdyn.api.world_object_pb2.WorldObject]:
        """Detection information. May include bounding boxes, image coordinates, 3D pose information, etc."""
        pass
    @property
    def image_response(self) -> bosdyn.api.image_pb2.ImageResponse:
        """The image we computed the data on. If the input image itself was provided in the request,
        this field is not populated.  This field is not set for non-image input.
        """
        pass
    image_rotation_angle: builtins.float
    """If the image was rotated for processing, this field will contain the amount it was rotated by
    (counter-clockwise, in radians).

    Note that the image returned is *not* rotated, regardless of if it was rotated
    for processing.  This ensures that all other calibration and metadata remains valid.
    """

    @property
    def other_data(self) -> google.protobuf.any_pb2.Any:
        """Non image-type data that can optionally be returned by a remote server."""
        pass
    status: global___NetworkComputeStatus.ValueType
    """Command status"""

    def __init__(self,
        *,
        header: typing.Optional[bosdyn.api.header_pb2.ResponseHeader] = ...,
        object_in_image: typing.Optional[typing.Iterable[bosdyn.api.world_object_pb2.WorldObject]] = ...,
        image_response: typing.Optional[bosdyn.api.image_pb2.ImageResponse] = ...,
        image_rotation_angle: builtins.float = ...,
        other_data: typing.Optional[google.protobuf.any_pb2.Any] = ...,
        status: global___NetworkComputeStatus.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["header",b"header","image_response",b"image_response","other_data",b"other_data"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["header",b"header","image_response",b"image_response","image_rotation_angle",b"image_rotation_angle","object_in_image",b"object_in_image","other_data",b"other_data","status",b"status"]) -> None: ...
global___NetworkComputeResponse = NetworkComputeResponse
