"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import bosdyn.api.header_pb2
import bosdyn.api.lease_pb2
import bosdyn.api.license_pb2
import bosdyn.api.robot_state_pb2
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _PowerCommandStatus:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _PowerCommandStatusEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_PowerCommandStatus.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    STATUS_UNKNOWN: _PowerCommandStatus.ValueType  # 0
    """Status is not specified."""

    STATUS_IN_PROGRESS: _PowerCommandStatus.ValueType  # 1
    """Power command is executing."""

    STATUS_SUCCESS: _PowerCommandStatus.ValueType  # 2
    """Power command succeeded."""

    STATUS_SHORE_POWER_CONNECTED: _PowerCommandStatus.ValueType  # 3
    """ERROR: Robot cannot be powered on while on wall power."""

    STATUS_BATTERY_MISSING: _PowerCommandStatus.ValueType  # 4
    """ERROR: Battery not inserted into robot."""

    STATUS_COMMAND_IN_PROGRESS: _PowerCommandStatus.ValueType  # 5
    """ERROR: Power command cant be overwritten."""

    STATUS_ESTOPPED: _PowerCommandStatus.ValueType  # 6
    """ERROR: Cannot power on while estopped. A robot may have multiple estops.
    Inspect EStopState for additional info.
    """

    STATUS_FAULTED: _PowerCommandStatus.ValueType  # 7
    """ERROR: Cannot power due to a fault. Inspect FaultState for more info."""

    STATUS_INTERNAL_ERROR: _PowerCommandStatus.ValueType  # 8
    """ERROR: Internal error occurred, may be clear-able by issuing a power off command."""

    STATUS_LICENSE_ERROR: _PowerCommandStatus.ValueType  # 9
    """ERROR: License check failed. Check license_status field for details."""

    INCOMPATIBLE_HARDWARE_ERROR: _PowerCommandStatus.ValueType  # 10
    """ERROR: The Spot hardware is not compatible with the request request."""

    STATUS_OVERRIDDEN: _PowerCommandStatus.ValueType  # 11
    """ERROR: Robot has overridden the power command and disabled motor power. In the case
    of a commanded power OFF, robot will report SUCCESS if power is disabled.
    """

class PowerCommandStatus(_PowerCommandStatus, metaclass=_PowerCommandStatusEnumTypeWrapper):
    """Feedback on the current state of a power command on the robot."""
    pass

STATUS_UNKNOWN: PowerCommandStatus.ValueType  # 0
"""Status is not specified."""

STATUS_IN_PROGRESS: PowerCommandStatus.ValueType  # 1
"""Power command is executing."""

STATUS_SUCCESS: PowerCommandStatus.ValueType  # 2
"""Power command succeeded."""

STATUS_SHORE_POWER_CONNECTED: PowerCommandStatus.ValueType  # 3
"""ERROR: Robot cannot be powered on while on wall power."""

STATUS_BATTERY_MISSING: PowerCommandStatus.ValueType  # 4
"""ERROR: Battery not inserted into robot."""

STATUS_COMMAND_IN_PROGRESS: PowerCommandStatus.ValueType  # 5
"""ERROR: Power command cant be overwritten."""

STATUS_ESTOPPED: PowerCommandStatus.ValueType  # 6
"""ERROR: Cannot power on while estopped. A robot may have multiple estops.
Inspect EStopState for additional info.
"""

STATUS_FAULTED: PowerCommandStatus.ValueType  # 7
"""ERROR: Cannot power due to a fault. Inspect FaultState for more info."""

STATUS_INTERNAL_ERROR: PowerCommandStatus.ValueType  # 8
"""ERROR: Internal error occurred, may be clear-able by issuing a power off command."""

STATUS_LICENSE_ERROR: PowerCommandStatus.ValueType  # 9
"""ERROR: License check failed. Check license_status field for details."""

INCOMPATIBLE_HARDWARE_ERROR: PowerCommandStatus.ValueType  # 10
"""ERROR: The Spot hardware is not compatible with the request request."""

STATUS_OVERRIDDEN: PowerCommandStatus.ValueType  # 11
"""ERROR: Robot has overridden the power command and disabled motor power. In the case
of a commanded power OFF, robot will report SUCCESS if power is disabled.
"""

global___PowerCommandStatus = PowerCommandStatus


class PowerCommandRequest(google.protobuf.message.Message):
    """The PowerCommand request which specifies a change in the robot's motor power."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class _Request:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _RequestEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[PowerCommandRequest._Request.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        REQUEST_UNKNOWN: PowerCommandRequest._Request.ValueType  # 0
        """Invalid request; do not use."""

        REQUEST_OFF: PowerCommandRequest._Request.ValueType  # 1
        """Cut power to motors immediately."""

        REQUEST_ON: PowerCommandRequest._Request.ValueType  # 2
        """Turn on power to the robot motors."""

        REQUEST_OFF_MOTORS: PowerCommandRequest._Request.ValueType  # 1
        """Cut power to motors immediately."""

        REQUEST_ON_MOTORS: PowerCommandRequest._Request.ValueType  # 2
        """Turn on power to the robot motors."""

        REQUEST_OFF_ROBOT: PowerCommandRequest._Request.ValueType  # 3
        """Turn off the robot. Same as physical switch."""

        REQUEST_CYCLE_ROBOT: PowerCommandRequest._Request.ValueType  # 4
        """Power cycle the robot. Same as physical switch."""

        REQUEST_OFF_PAYLOAD_PORTS: PowerCommandRequest._Request.ValueType  # 5
        """Cut power to the payload ports."""

        REQUEST_ON_PAYLOAD_PORTS: PowerCommandRequest._Request.ValueType  # 6
        """Turn on power to the payload ports."""

        REQUEST_OFF_WIFI_RADIO: PowerCommandRequest._Request.ValueType  # 7
        """Cut power to the hardware Wi-Fi radio."""

        REQUEST_ON_WIFI_RADIO: PowerCommandRequest._Request.ValueType  # 8
        """Power on the hardware Wi-Fi radio."""

    class Request(_Request, metaclass=_RequestEnumTypeWrapper):
        """Commands for the robot to execute.
        Note that not all Spot robots are compatible with all these commands. Check your robot's
        HardwareConfiguration in bosdyn.api.robot_state.
        """
        pass

    REQUEST_UNKNOWN: PowerCommandRequest.Request.ValueType  # 0
    """Invalid request; do not use."""

    REQUEST_OFF: PowerCommandRequest.Request.ValueType  # 1
    """Cut power to motors immediately."""

    REQUEST_ON: PowerCommandRequest.Request.ValueType  # 2
    """Turn on power to the robot motors."""

    REQUEST_OFF_MOTORS: PowerCommandRequest.Request.ValueType  # 1
    """Cut power to motors immediately."""

    REQUEST_ON_MOTORS: PowerCommandRequest.Request.ValueType  # 2
    """Turn on power to the robot motors."""

    REQUEST_OFF_ROBOT: PowerCommandRequest.Request.ValueType  # 3
    """Turn off the robot. Same as physical switch."""

    REQUEST_CYCLE_ROBOT: PowerCommandRequest.Request.ValueType  # 4
    """Power cycle the robot. Same as physical switch."""

    REQUEST_OFF_PAYLOAD_PORTS: PowerCommandRequest.Request.ValueType  # 5
    """Cut power to the payload ports."""

    REQUEST_ON_PAYLOAD_PORTS: PowerCommandRequest.Request.ValueType  # 6
    """Turn on power to the payload ports."""

    REQUEST_OFF_WIFI_RADIO: PowerCommandRequest.Request.ValueType  # 7
    """Cut power to the hardware Wi-Fi radio."""

    REQUEST_ON_WIFI_RADIO: PowerCommandRequest.Request.ValueType  # 8
    """Power on the hardware Wi-Fi radio."""


    HEADER_FIELD_NUMBER: builtins.int
    LEASE_FIELD_NUMBER: builtins.int
    REQUEST_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> bosdyn.api.header_pb2.RequestHeader:
        """Common request header."""
        pass
    @property
    def lease(self) -> bosdyn.api.lease_pb2.Lease:
        """The Lease to show ownership of the robot."""
        pass
    request: global___PowerCommandRequest.Request.ValueType
    def __init__(self,
        *,
        header: typing.Optional[bosdyn.api.header_pb2.RequestHeader] = ...,
        lease: typing.Optional[bosdyn.api.lease_pb2.Lease] = ...,
        request: global___PowerCommandRequest.Request.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["header",b"header","lease",b"lease"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["header",b"header","lease",b"lease","request",b"request"]) -> None: ...
global___PowerCommandRequest = PowerCommandRequest

class PowerCommandResponse(google.protobuf.message.Message):
    """The PowerCommand response message which contains a unique identifier that can be used to
    get feedback on the progress of a power command from the power service.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    HEADER_FIELD_NUMBER: builtins.int
    LEASE_USE_RESULT_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    POWER_COMMAND_ID_FIELD_NUMBER: builtins.int
    LICENSE_STATUS_FIELD_NUMBER: builtins.int
    BLOCKING_FAULTS_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> bosdyn.api.header_pb2.ResponseHeader:
        """Common response header."""
        pass
    @property
    def lease_use_result(self) -> bosdyn.api.lease_pb2.LeaseUseResult:
        """Details about how the lease was used."""
        pass
    status: global___PowerCommandStatus.ValueType
    """Current feedback of specified command."""

    power_command_id: builtins.int
    """Unique identifier for the command, If empty, was not accepted."""

    license_status: bosdyn.api.license_pb2.LicenseInfo.Status.ValueType
    """License check status"""

    @property
    def blocking_faults(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[bosdyn.api.robot_state_pb2.SystemFault]:
        """Optional list of active faults blocking success of the PowerCommandRequest"""
        pass
    def __init__(self,
        *,
        header: typing.Optional[bosdyn.api.header_pb2.ResponseHeader] = ...,
        lease_use_result: typing.Optional[bosdyn.api.lease_pb2.LeaseUseResult] = ...,
        status: global___PowerCommandStatus.ValueType = ...,
        power_command_id: builtins.int = ...,
        license_status: bosdyn.api.license_pb2.LicenseInfo.Status.ValueType = ...,
        blocking_faults: typing.Optional[typing.Iterable[bosdyn.api.robot_state_pb2.SystemFault]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["header",b"header","lease_use_result",b"lease_use_result"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["blocking_faults",b"blocking_faults","header",b"header","lease_use_result",b"lease_use_result","license_status",b"license_status","power_command_id",b"power_command_id","status",b"status"]) -> None: ...
global___PowerCommandResponse = PowerCommandResponse

class PowerCommandFeedbackRequest(google.protobuf.message.Message):
    """The PowerCommandFeedback request message, which can get the feedback for a specific
    power command id number.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    HEADER_FIELD_NUMBER: builtins.int
    POWER_COMMAND_ID_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> bosdyn.api.header_pb2.RequestHeader:
        """Common request header."""
        pass
    power_command_id: builtins.int
    """Unique identifier for the command of which feedback is desired."""

    def __init__(self,
        *,
        header: typing.Optional[bosdyn.api.header_pb2.RequestHeader] = ...,
        power_command_id: builtins.int = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["header",b"header"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["header",b"header","power_command_id",b"power_command_id"]) -> None: ...
global___PowerCommandFeedbackRequest = PowerCommandFeedbackRequest

class PowerCommandFeedbackResponse(google.protobuf.message.Message):
    """The PowerCommandFeedback response message, which contains the progress of the power command."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    HEADER_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    BLOCKING_FAULTS_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> bosdyn.api.header_pb2.ResponseHeader:
        """Common response header."""
        pass
    status: global___PowerCommandStatus.ValueType
    """Current status of specified command."""

    @property
    def blocking_faults(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[bosdyn.api.robot_state_pb2.SystemFault]:
        """Optional list of active faults blocking success of the PowerCommandRequest"""
        pass
    def __init__(self,
        *,
        header: typing.Optional[bosdyn.api.header_pb2.ResponseHeader] = ...,
        status: global___PowerCommandStatus.ValueType = ...,
        blocking_faults: typing.Optional[typing.Iterable[bosdyn.api.robot_state_pb2.SystemFault]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["header",b"header"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["blocking_faults",b"blocking_faults","header",b"header","status",b"status"]) -> None: ...
global___PowerCommandFeedbackResponse = PowerCommandFeedbackResponse
