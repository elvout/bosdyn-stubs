"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import bosdyn.api.geometry_pb2
import builtins
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import google.protobuf.wrappers_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _PositionalInterpolation:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _PositionalInterpolationEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_PositionalInterpolation.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    POS_INTERP_UNKNOWN: _PositionalInterpolation.ValueType  # 0
    """Unknown interpolation, do not use."""

    POS_INTERP_LINEAR: _PositionalInterpolation.ValueType  # 1
    """Linear interpolation for positional data."""

    POS_INTERP_CUBIC: _PositionalInterpolation.ValueType  # 2
    """Cubic interpolation for positional data."""

class PositionalInterpolation(_PositionalInterpolation, metaclass=_PositionalInterpolationEnumTypeWrapper):
    """Parameters for how positional trajectories will be interpolated on robot."""
    pass

POS_INTERP_UNKNOWN: PositionalInterpolation.ValueType  # 0
"""Unknown interpolation, do not use."""

POS_INTERP_LINEAR: PositionalInterpolation.ValueType  # 1
"""Linear interpolation for positional data."""

POS_INTERP_CUBIC: PositionalInterpolation.ValueType  # 2
"""Cubic interpolation for positional data."""

global___PositionalInterpolation = PositionalInterpolation


class _AngularInterpolation:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _AngularInterpolationEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_AngularInterpolation.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    ANG_INTERP_UNKNOWN: _AngularInterpolation.ValueType  # 0
    """Unknown interpolation, do not use."""

    ANG_INTERP_LINEAR: _AngularInterpolation.ValueType  # 1
    """Linear interpolation for angular data."""

    ANG_INTERP_CUBIC_EULER: _AngularInterpolation.ValueType  # 2
    """Cubic interpolation (using Euler method) for angular data."""

class AngularInterpolation(_AngularInterpolation, metaclass=_AngularInterpolationEnumTypeWrapper):
    """Parameters for how angular trajectories will be interpolated on robot."""
    pass

ANG_INTERP_UNKNOWN: AngularInterpolation.ValueType  # 0
"""Unknown interpolation, do not use."""

ANG_INTERP_LINEAR: AngularInterpolation.ValueType  # 1
"""Linear interpolation for angular data."""

ANG_INTERP_CUBIC_EULER: AngularInterpolation.ValueType  # 2
"""Cubic interpolation (using Euler method) for angular data."""

global___AngularInterpolation = AngularInterpolation


class SE2Trajectory(google.protobuf.message.Message):
    """A 2D pose trajectory, which specified multiple points and the desired times the robot should
    reach these points.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    POINTS_FIELD_NUMBER: builtins.int
    REFERENCE_TIME_FIELD_NUMBER: builtins.int
    INTERPOLATION_FIELD_NUMBER: builtins.int
    @property
    def points(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SE2TrajectoryPoint]:
        """The points in trajectory"""
        pass
    @property
    def reference_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """All trajectories specify times relative to this reference time. The reference time should be
        in robot clock. If this field is not included, this time will be the receive time of the
        command.
        """
        pass
    interpolation: global___PositionalInterpolation.ValueType
    """Parameters for how trajectories will be interpolated on robot."""

    def __init__(self,
        *,
        points: typing.Optional[typing.Iterable[global___SE2TrajectoryPoint]] = ...,
        reference_time: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        interpolation: global___PositionalInterpolation.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["reference_time",b"reference_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["interpolation",b"interpolation","points",b"points","reference_time",b"reference_time"]) -> None: ...
global___SE2Trajectory = SE2Trajectory

class SE2TrajectoryPoint(google.protobuf.message.Message):
    """A SE2 pose that can be used as a point within a trajectory."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    POSE_FIELD_NUMBER: builtins.int
    TIME_SINCE_REFERENCE_FIELD_NUMBER: builtins.int
    @property
    def pose(self) -> bosdyn.api.geometry_pb2.SE2Pose:
        """Required pose the robot will try and achieve."""
        pass
    @property
    def time_since_reference(self) -> google.protobuf.duration_pb2.Duration:
        """The duration to reach the point relative to the trajectory reference time."""
        pass
    def __init__(self,
        *,
        pose: typing.Optional[bosdyn.api.geometry_pb2.SE2Pose] = ...,
        time_since_reference: typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["pose",b"pose","time_since_reference",b"time_since_reference"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["pose",b"pose","time_since_reference",b"time_since_reference"]) -> None: ...
global___SE2TrajectoryPoint = SE2TrajectoryPoint

class SE3Trajectory(google.protobuf.message.Message):
    """A 3D pose trajectory, which specified multiple poses (and velocities for each pose)
    and the desired times the robot should reach these points.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    POINTS_FIELD_NUMBER: builtins.int
    REFERENCE_TIME_FIELD_NUMBER: builtins.int
    POS_INTERPOLATION_FIELD_NUMBER: builtins.int
    ANG_INTERPOLATION_FIELD_NUMBER: builtins.int
    @property
    def points(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SE3TrajectoryPoint]:
        """The points in trajectory"""
        pass
    @property
    def reference_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """All trajectories specify times relative to this reference time. The reference time should be
        in robot clock. If this field is not included, this time will be the receive time of the
        command.
        """
        pass
    pos_interpolation: global___PositionalInterpolation.ValueType
    """Parameters for how trajectories will be interpolated on robot."""

    ang_interpolation: global___AngularInterpolation.ValueType
    def __init__(self,
        *,
        points: typing.Optional[typing.Iterable[global___SE3TrajectoryPoint]] = ...,
        reference_time: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        pos_interpolation: global___PositionalInterpolation.ValueType = ...,
        ang_interpolation: global___AngularInterpolation.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["reference_time",b"reference_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["ang_interpolation",b"ang_interpolation","points",b"points","pos_interpolation",b"pos_interpolation","reference_time",b"reference_time"]) -> None: ...
global___SE3Trajectory = SE3Trajectory

class SE3TrajectoryPoint(google.protobuf.message.Message):
    """A SE3 pose and velocity that can be used as a point within a trajectory."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    POSE_FIELD_NUMBER: builtins.int
    VELOCITY_FIELD_NUMBER: builtins.int
    TIME_SINCE_REFERENCE_FIELD_NUMBER: builtins.int
    @property
    def pose(self) -> bosdyn.api.geometry_pb2.SE3Pose:
        """Required pose the robot will try and achieve."""
        pass
    @property
    def velocity(self) -> bosdyn.api.geometry_pb2.SE3Velocity:
        """Optional velocity (linear and angular) the robot will try and achieve."""
        pass
    @property
    def time_since_reference(self) -> google.protobuf.duration_pb2.Duration:
        """The duration to reach the point relative to the trajectory reference time."""
        pass
    def __init__(self,
        *,
        pose: typing.Optional[bosdyn.api.geometry_pb2.SE3Pose] = ...,
        velocity: typing.Optional[bosdyn.api.geometry_pb2.SE3Velocity] = ...,
        time_since_reference: typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["pose",b"pose","time_since_reference",b"time_since_reference","velocity",b"velocity"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["pose",b"pose","time_since_reference",b"time_since_reference","velocity",b"velocity"]) -> None: ...
global___SE3TrajectoryPoint = SE3TrajectoryPoint

class Vec3Trajectory(google.protobuf.message.Message):
    """A 3D point trajectory, described by 3D points, a starting and ending velocity, and
    a reference time.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    POINTS_FIELD_NUMBER: builtins.int
    REFERENCE_TIME_FIELD_NUMBER: builtins.int
    POS_INTERPOLATION_FIELD_NUMBER: builtins.int
    STARTING_VELOCITY_FIELD_NUMBER: builtins.int
    ENDING_VELOCITY_FIELD_NUMBER: builtins.int
    @property
    def points(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Vec3TrajectoryPoint]:
        """The points in trajectory."""
        pass
    @property
    def reference_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """All trajectories specify times relative to this reference time. The reference time should be
        in robot clock. If this field is not included, this time will be the receive time of the
        command.
        """
        pass
    pos_interpolation: global___PositionalInterpolation.ValueType
    """Parameters for how trajectories will be interpolated on robot."""

    @property
    def starting_velocity(self) -> bosdyn.api.geometry_pb2.Vec3:
        """Velocity at the starting point of the trajectory."""
        pass
    @property
    def ending_velocity(self) -> bosdyn.api.geometry_pb2.Vec3:
        """Velocity at the ending point of the trajectory."""
        pass
    def __init__(self,
        *,
        points: typing.Optional[typing.Iterable[global___Vec3TrajectoryPoint]] = ...,
        reference_time: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        pos_interpolation: global___PositionalInterpolation.ValueType = ...,
        starting_velocity: typing.Optional[bosdyn.api.geometry_pb2.Vec3] = ...,
        ending_velocity: typing.Optional[bosdyn.api.geometry_pb2.Vec3] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["ending_velocity",b"ending_velocity","reference_time",b"reference_time","starting_velocity",b"starting_velocity"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["ending_velocity",b"ending_velocity","points",b"points","pos_interpolation",b"pos_interpolation","reference_time",b"reference_time","starting_velocity",b"starting_velocity"]) -> None: ...
global___Vec3Trajectory = Vec3Trajectory

class Vec3TrajectoryPoint(google.protobuf.message.Message):
    """A 3D point (and linear velocity) that can be used as a point within a trajectory."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    POINT_FIELD_NUMBER: builtins.int
    LINEAR_SPEED_FIELD_NUMBER: builtins.int
    TIME_SINCE_REFERENCE_FIELD_NUMBER: builtins.int
    @property
    def point(self) -> bosdyn.api.geometry_pb2.Vec3:
        """The point 3D position."""
        pass
    linear_speed: builtins.float
    """These are all optional.  If nothing is specified, good defaults will be chosen
    server-side.
    """

    @property
    def time_since_reference(self) -> google.protobuf.duration_pb2.Duration:
        """The duration to reach the point relative to the trajectory reference time."""
        pass
    def __init__(self,
        *,
        point: typing.Optional[bosdyn.api.geometry_pb2.Vec3] = ...,
        linear_speed: builtins.float = ...,
        time_since_reference: typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["point",b"point","time_since_reference",b"time_since_reference"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["linear_speed",b"linear_speed","point",b"point","time_since_reference",b"time_since_reference"]) -> None: ...
global___Vec3TrajectoryPoint = Vec3TrajectoryPoint

class WrenchTrajectory(google.protobuf.message.Message):
    """A time-based trajectories of wrenches."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    POINTS_FIELD_NUMBER: builtins.int
    REFERENCE_TIME_FIELD_NUMBER: builtins.int
    @property
    def points(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___WrenchTrajectoryPoint]:
        """The wrenches in the trajectory"""
        pass
    @property
    def reference_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """All trajectories specify times relative to this reference time. The reference time should be
        in robot clock. If this field is not included, this time will be the receive time of the
        command.
        """
        pass
    def __init__(self,
        *,
        points: typing.Optional[typing.Iterable[global___WrenchTrajectoryPoint]] = ...,
        reference_time: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["reference_time",b"reference_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["points",b"points","reference_time",b"reference_time"]) -> None: ...
global___WrenchTrajectory = WrenchTrajectory

class WrenchTrajectoryPoint(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    WRENCH_FIELD_NUMBER: builtins.int
    TIME_SINCE_REFERENCE_FIELD_NUMBER: builtins.int
    @property
    def wrench(self) -> bosdyn.api.geometry_pb2.Wrench:
        """The wrench to apply at this point in time."""
        pass
    @property
    def time_since_reference(self) -> google.protobuf.duration_pb2.Duration:
        """The duration to reach the point relative to the trajectory reference time."""
        pass
    def __init__(self,
        *,
        wrench: typing.Optional[bosdyn.api.geometry_pb2.Wrench] = ...,
        time_since_reference: typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["time_since_reference",b"time_since_reference","wrench",b"wrench"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["time_since_reference",b"time_since_reference","wrench",b"wrench"]) -> None: ...
global___WrenchTrajectoryPoint = WrenchTrajectoryPoint

class ScalarTrajectory(google.protobuf.message.Message):
    """A Point trajectory."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    POINTS_FIELD_NUMBER: builtins.int
    REFERENCE_TIME_FIELD_NUMBER: builtins.int
    INTERPOLATION_FIELD_NUMBER: builtins.int
    @property
    def points(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ScalarTrajectoryPoint]:
        """The points in trajectory"""
        pass
    @property
    def reference_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """All trajectories specify times relative to this reference time. The reference time should be
        in robot clock. If this field is not included, this time will be the receive time of the
        command.
        """
        pass
    interpolation: global___PositionalInterpolation.ValueType
    """Parameters for how trajectories will be interpolated on robot.
    (Note: ignored for ClawGripperCommand.Request, which will automatically
    select between cubic interpolation or a minimum time trajectory)
    """

    def __init__(self,
        *,
        points: typing.Optional[typing.Iterable[global___ScalarTrajectoryPoint]] = ...,
        reference_time: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        interpolation: global___PositionalInterpolation.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["reference_time",b"reference_time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["interpolation",b"interpolation","points",b"points","reference_time",b"reference_time"]) -> None: ...
global___ScalarTrajectory = ScalarTrajectory

class ScalarTrajectoryPoint(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    POINT_FIELD_NUMBER: builtins.int
    VELOCITY_FIELD_NUMBER: builtins.int
    TIME_SINCE_REFERENCE_FIELD_NUMBER: builtins.int
    point: builtins.float
    """Required position at the trajectory point's reference time."""

    @property
    def velocity(self) -> google.protobuf.wrappers_pb2.DoubleValue:
        """Optional speed at the trajectory point's reference time."""
        pass
    @property
    def time_since_reference(self) -> google.protobuf.duration_pb2.Duration:
        """The duration to reach the point relative to the trajectory reference time."""
        pass
    def __init__(self,
        *,
        point: builtins.float = ...,
        velocity: typing.Optional[google.protobuf.wrappers_pb2.DoubleValue] = ...,
        time_since_reference: typing.Optional[google.protobuf.duration_pb2.Duration] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["time_since_reference",b"time_since_reference","velocity",b"velocity"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["point",b"point","time_since_reference",b"time_since_reference","velocity",b"velocity"]) -> None: ...
global___ScalarTrajectoryPoint = ScalarTrajectoryPoint
