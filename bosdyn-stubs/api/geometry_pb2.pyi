"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.wrappers_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class Vec2(google.protobuf.message.Message):
    """Two dimensional vector primitive."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    X_FIELD_NUMBER: builtins.int
    Y_FIELD_NUMBER: builtins.int
    x: builtins.float
    y: builtins.float
    def __init__(self,
        *,
        x: builtins.float = ...,
        y: builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["x",b"x","y",b"y"]) -> None: ...
global___Vec2 = Vec2

class Vec3(google.protobuf.message.Message):
    """Three dimensional vector primitive."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    X_FIELD_NUMBER: builtins.int
    Y_FIELD_NUMBER: builtins.int
    Z_FIELD_NUMBER: builtins.int
    x: builtins.float
    y: builtins.float
    z: builtins.float
    def __init__(self,
        *,
        x: builtins.float = ...,
        y: builtins.float = ...,
        z: builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["x",b"x","y",b"y","z",b"z"]) -> None: ...
global___Vec3 = Vec3

class CylindricalCoordinate(google.protobuf.message.Message):
    """Cylindrical coordinates are a generalization of polar coordiates, adding a
    height
    axis. See (http://mathworld.wolfram.com/CylindricalCoordinates.html) for
    more details.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    R_FIELD_NUMBER: builtins.int
    THETA_FIELD_NUMBER: builtins.int
    Z_FIELD_NUMBER: builtins.int
    r: builtins.float
    """Radial coordinate"""

    theta: builtins.float
    """Azimuthal coordinate"""

    z: builtins.float
    """Vertical coordiante"""

    def __init__(self,
        *,
        r: builtins.float = ...,
        theta: builtins.float = ...,
        z: builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["r",b"r","theta",b"theta","z",b"z"]) -> None: ...
global___CylindricalCoordinate = CylindricalCoordinate

class Quaternion(google.protobuf.message.Message):
    """Quaternion primitive. A quaternion can be used to describe the rotation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    X_FIELD_NUMBER: builtins.int
    Y_FIELD_NUMBER: builtins.int
    Z_FIELD_NUMBER: builtins.int
    W_FIELD_NUMBER: builtins.int
    x: builtins.float
    y: builtins.float
    z: builtins.float
    w: builtins.float
    def __init__(self,
        *,
        x: builtins.float = ...,
        y: builtins.float = ...,
        z: builtins.float = ...,
        w: builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["w",b"w","x",b"x","y",b"y","z",b"z"]) -> None: ...
global___Quaternion = Quaternion

class Plane(google.protobuf.message.Message):
    """Plane primitive, described with a point and normal."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    POINT_FIELD_NUMBER: builtins.int
    NORMAL_FIELD_NUMBER: builtins.int
    @property
    def point(self) -> global___Vec3:
        """A point on the plane."""
        pass
    @property
    def normal(self) -> global___Vec3:
        """The direction of the planes normal."""
        pass
    def __init__(self,
        *,
        point: typing.Optional[global___Vec3] = ...,
        normal: typing.Optional[global___Vec3] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["normal",b"normal","point",b"point"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["normal",b"normal","point",b"point"]) -> None: ...
global___Plane = Plane

class Quad(google.protobuf.message.Message):
    """A square oriented in 3D space."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    POSE_FIELD_NUMBER: builtins.int
    SIZE_FIELD_NUMBER: builtins.int
    @property
    def pose(self) -> global___SE3Pose:
        """The center of the quad and the orientation of the normal.
        The normal axis is [0, 0, 1].
        """
        pass
    size: builtins.float
    """The side length of the quad."""

    def __init__(self,
        *,
        pose: typing.Optional[global___SE3Pose] = ...,
        size: builtins.float = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["pose",b"pose"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["pose",b"pose","size",b"size"]) -> None: ...
global___Quad = Quad

class Ray(google.protobuf.message.Message):
    """A ray in 3D space."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ORIGIN_FIELD_NUMBER: builtins.int
    DIRECTION_FIELD_NUMBER: builtins.int
    @property
    def origin(self) -> global___Vec3:
        """Base of ray."""
        pass
    @property
    def direction(self) -> global___Vec3:
        """Unit vector defining the direction of the ray."""
        pass
    def __init__(self,
        *,
        origin: typing.Optional[global___Vec3] = ...,
        direction: typing.Optional[global___Vec3] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["direction",b"direction","origin",b"origin"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["direction",b"direction","origin",b"origin"]) -> None: ...
global___Ray = Ray

class SE2Pose(google.protobuf.message.Message):
    """Geometric primitive to describe 2D position and rotation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    POSITION_FIELD_NUMBER: builtins.int
    ANGLE_FIELD_NUMBER: builtins.int
    @property
    def position(self) -> global___Vec2:
        """(m)"""
        pass
    angle: builtins.float
    """(rad)"""

    def __init__(self,
        *,
        position: typing.Optional[global___Vec2] = ...,
        angle: builtins.float = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["position",b"position"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["angle",b"angle","position",b"position"]) -> None: ...
global___SE2Pose = SE2Pose

class SE2Velocity(google.protobuf.message.Message):
    """Geometric primitive that describes a 2D velocity through it's linear and angular components."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    LINEAR_FIELD_NUMBER: builtins.int
    ANGULAR_FIELD_NUMBER: builtins.int
    @property
    def linear(self) -> global___Vec2:
        """(m/s)"""
        pass
    angular: builtins.float
    """(rad/s)"""

    def __init__(self,
        *,
        linear: typing.Optional[global___Vec2] = ...,
        angular: builtins.float = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["linear",b"linear"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["angular",b"angular","linear",b"linear"]) -> None: ...
global___SE2Velocity = SE2Velocity

class SE2VelocityLimit(google.protobuf.message.Message):
    """Geometric primitive to couple minimum and maximum SE2Velocities in a single message."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    MAX_VEL_FIELD_NUMBER: builtins.int
    MIN_VEL_FIELD_NUMBER: builtins.int
    @property
    def max_vel(self) -> global___SE2Velocity:
        """If set, limits the maximum velocity."""
        pass
    @property
    def min_vel(self) -> global___SE2Velocity:
        """If set, limits the minimum velocity."""
        pass
    def __init__(self,
        *,
        max_vel: typing.Optional[global___SE2Velocity] = ...,
        min_vel: typing.Optional[global___SE2Velocity] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["max_vel",b"max_vel","min_vel",b"min_vel"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["max_vel",b"max_vel","min_vel",b"min_vel"]) -> None: ...
global___SE2VelocityLimit = SE2VelocityLimit

class SE3Pose(google.protobuf.message.Message):
    """Geometric primitive to describe 3D position and rotation."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    POSITION_FIELD_NUMBER: builtins.int
    ROTATION_FIELD_NUMBER: builtins.int
    @property
    def position(self) -> global___Vec3:
        """(m)"""
        pass
    @property
    def rotation(self) -> global___Quaternion: ...
    def __init__(self,
        *,
        position: typing.Optional[global___Vec3] = ...,
        rotation: typing.Optional[global___Quaternion] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["position",b"position","rotation",b"rotation"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["position",b"position","rotation",b"rotation"]) -> None: ...
global___SE3Pose = SE3Pose

class SE3Velocity(google.protobuf.message.Message):
    """Geometric primitive that describes a 3D velocity through it's linear and angular components."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    LINEAR_FIELD_NUMBER: builtins.int
    ANGULAR_FIELD_NUMBER: builtins.int
    @property
    def linear(self) -> global___Vec3:
        """(m/s)"""
        pass
    @property
    def angular(self) -> global___Vec3:
        """(rad/s)"""
        pass
    def __init__(self,
        *,
        linear: typing.Optional[global___Vec3] = ...,
        angular: typing.Optional[global___Vec3] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["angular",b"angular","linear",b"linear"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["angular",b"angular","linear",b"linear"]) -> None: ...
global___SE3Velocity = SE3Velocity

class Wrench(google.protobuf.message.Message):
    """Geometric primitive used to specify forces and torques."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    FORCE_FIELD_NUMBER: builtins.int
    TORQUE_FIELD_NUMBER: builtins.int
    @property
    def force(self) -> global___Vec3:
        """(N)"""
        pass
    @property
    def torque(self) -> global___Vec3:
        """(Nm)"""
        pass
    def __init__(self,
        *,
        force: typing.Optional[global___Vec3] = ...,
        torque: typing.Optional[global___Vec3] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["force",b"force","torque",b"torque"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["force",b"force","torque",b"torque"]) -> None: ...
global___Wrench = Wrench

class FrameTreeSnapshot(google.protobuf.message.Message):
    """*
      A frame is a named location in space. \\
    For example, the following frames are defined by the API: \\
     - "body":   A frame centered on the robot's body. \\
     - "vision": A non-moving (inertial) frame that is the robot's best
                 estimate of a fixed location in the world. It is based on
                 both dead reckoning and visual analysis of the world. \\
     - "odom":   A non-moving (inertial) frame that is based on the kinematic
                 odometry of the robot only. \\
    Additional frames are available for robot joints, sensors, and items
    detected in the world. \\

    The FrameTreeSnapshot represents the relationships between the frames that the robot
    knows about at a particular point in time. For example, with the FrameTreeSnapshot,
    an API client can determine where the "body" is relative to the "vision". \\

    To reduce data bandwidth, the FrameTreeSnapshot will typically contain
    a small subset of all known frames. By default, all services MUST
    include "vision", "body", and "odom" frames in the FrameTreeSnapshot, but
    additional frames can also be included. For example, an Image service
    would likely include the frame located at the base of the camera lens
    where the picture was taken. \\

    Frame relationships are expressed as edges between "parent" frames and
    "child" frames, with an SE3Pose indicating the pose of the "child" frame
    expressed in the "child" frame. These edges are included in the edge_map
    field. For example, if frame "hand" is 1m in front of the frame "shoulder",
    then the FrameTreeSnapshot might contain: \\
     edge_map {                                    \\
        key: "hand"                                \\
        value: {                                   \\
            parent_frame_name: "shoulder"          \\
            parent_tform_child: {                  \\
               position: {                         \\
                 x: 1.0                            \\
                 y: 0.0                            \\
                 z: 0.0                            \\
               }                                   \\
            }                                      \\
         }                                         \\
     }                                             \\

    Frame relationships can be inverted. So, to find where the "shoulder"
    is in relationship the "hand", the parent_tform_child pose in the edge
    above can be inverted: \\
         hand_tform_shoulder = shoulder_tform_hand.inverse() \\
    Frame relationships can also be concatenated. If there is an additional
    edge specifying the pose of the "shoulder" relative to the "body", then
    to find where the "hand" is relative to the "body" do: \\
         body_tform_hand = body_tform_shoulder * shoulder_tform_hand \\

    The two properties above reduce data size. Instead of having to send N^2
    edge_map entries to represent all relationships between N frames,
    only N edge_map entries need to be sent. Clients will need to determine
    the chain of edges to follow to get from one frame to another frame,
    and then do inversion and concatentation to generate the appropriate pose. \\

    Note that all FrameTreeSnapshots are expected to be a single rooted tree.
    The syntax for FrameTreeSnapshot could also support graphs with
    cycles, or forests of trees - but clients should treat those as invalid
    representations. \\
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class ParentEdge(google.protobuf.message.Message):
        """ParentEdge represents the relationship from a child frame to a parent frame."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        PARENT_FRAME_NAME_FIELD_NUMBER: builtins.int
        PARENT_TFORM_CHILD_FIELD_NUMBER: builtins.int
        parent_frame_name: typing.Text
        """The name of the parent frame. Must be non-empty. If parent_frame_name is
        not a key in edge_map, it is the root of the tree.
        """

        @property
        def parent_tform_child(self) -> global___SE3Pose:
            """Transform representing the pose of the child frame in the parent's frame."""
            pass
        def __init__(self,
            *,
            parent_frame_name: typing.Text = ...,
            parent_tform_child: typing.Optional[global___SE3Pose] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["parent_tform_child",b"parent_tform_child"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["parent_frame_name",b"parent_frame_name","parent_tform_child",b"parent_tform_child"]) -> None: ...

    class ChildToParentEdgeMapEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text
        @property
        def value(self) -> global___FrameTreeSnapshot.ParentEdge: ...
        def __init__(self,
            *,
            key: typing.Text = ...,
            value: typing.Optional[global___FrameTreeSnapshot.ParentEdge] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    CHILD_TO_PARENT_EDGE_MAP_FIELD_NUMBER: builtins.int
    @property
    def child_to_parent_edge_map(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___FrameTreeSnapshot.ParentEdge]:
        """child_to_parent_edge_map maps the child frame name to the ParentEdge.
        In aggregate, this forms the tree structure.
        """
        pass
    def __init__(self,
        *,
        child_to_parent_edge_map: typing.Optional[typing.Mapping[typing.Text, global___FrameTreeSnapshot.ParentEdge]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["child_to_parent_edge_map",b"child_to_parent_edge_map"]) -> None: ...
global___FrameTreeSnapshot = FrameTreeSnapshot

class Box2(google.protobuf.message.Message):
    """Geometric primitive describing a two-dimensional box."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SIZE_FIELD_NUMBER: builtins.int
    @property
    def size(self) -> global___Vec2: ...
    def __init__(self,
        *,
        size: typing.Optional[global___Vec2] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["size",b"size"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["size",b"size"]) -> None: ...
global___Box2 = Box2

class Box2WithFrame(google.protobuf.message.Message):
    """Geometric primitive to describe a 2D box in a specific frame."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    BOX_FIELD_NUMBER: builtins.int
    FRAME_NAME_FIELD_NUMBER: builtins.int
    FRAME_NAME_TFORM_BOX_FIELD_NUMBER: builtins.int
    @property
    def box(self) -> global___Box2:
        """The box is specified with width (y) and length (x), and the full box is
        fixed at an origin, where it's sides are along the coordinate frame's
        axes.
        """
        pass
    frame_name: typing.Text
    """The pose of the axis-aligned box is in 'frame_name'."""

    @property
    def frame_name_tform_box(self) -> global___SE3Pose:
        """The transformation of the axis-aligned box into the desired frame
        (specified above).
        """
        pass
    def __init__(self,
        *,
        box: typing.Optional[global___Box2] = ...,
        frame_name: typing.Text = ...,
        frame_name_tform_box: typing.Optional[global___SE3Pose] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["box",b"box","frame_name_tform_box",b"frame_name_tform_box"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["box",b"box","frame_name",b"frame_name","frame_name_tform_box",b"frame_name_tform_box"]) -> None: ...
global___Box2WithFrame = Box2WithFrame

class Box3(google.protobuf.message.Message):
    """Geometric primitive describing a three-dimensional box."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SIZE_FIELD_NUMBER: builtins.int
    @property
    def size(self) -> global___Vec3: ...
    def __init__(self,
        *,
        size: typing.Optional[global___Vec3] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["size",b"size"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["size",b"size"]) -> None: ...
global___Box3 = Box3

class Box3WithFrame(google.protobuf.message.Message):
    """Geometric primitive to describe a 3D box in a specific frame."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    BOX_FIELD_NUMBER: builtins.int
    FRAME_NAME_FIELD_NUMBER: builtins.int
    FRAME_NAME_TFORM_BOX_FIELD_NUMBER: builtins.int
    @property
    def box(self) -> global___Box3:
        """The box width (y), length (x), and height (z) are interpreted in, and the
        full box is fixed at an origin, where it's sides are along the coordinate
        frame's axes.
        """
        pass
    frame_name: typing.Text
    """The pose of the axis-aligned box is in 'frame_name'."""

    @property
    def frame_name_tform_box(self) -> global___SE3Pose:
        """The transformation of the axis-aligned box into the desired frame
        (specified above).
        """
        pass
    def __init__(self,
        *,
        box: typing.Optional[global___Box3] = ...,
        frame_name: typing.Text = ...,
        frame_name_tform_box: typing.Optional[global___SE3Pose] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["box",b"box","frame_name_tform_box",b"frame_name_tform_box"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["box",b"box","frame_name",b"frame_name","frame_name_tform_box",b"frame_name_tform_box"]) -> None: ...
global___Box3WithFrame = Box3WithFrame

class Matrix(google.protobuf.message.Message):
    """Represents a row-major order matrix of doubles."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ROWS_FIELD_NUMBER: builtins.int
    COLS_FIELD_NUMBER: builtins.int
    VALUES_FIELD_NUMBER: builtins.int
    rows: builtins.int
    cols: builtins.int
    @property
    def values(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
    def __init__(self,
        *,
        rows: builtins.int = ...,
        cols: builtins.int = ...,
        values: typing.Optional[typing.Iterable[builtins.float]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cols",b"cols","rows",b"rows","values",b"values"]) -> None: ...
global___Matrix = Matrix

class SE3Covariance(google.protobuf.message.Message):
    """Represents the translation/rotation covariance of an SE3 Pose.
    The 6x6 matrix can be viewed as the covariance among 6 variables: \\
         rx     ry  rz    x    y    z                                 \\
    rx rxrx  rxry rxrz  rxx  rxy  rxz                                 \\
    ry ryrx  ryry ryrz  ryx  ryy  ryz                                 \\
    rz rzrx  rzry rzrz  rzx  rzy  rzz                                 \\
    x   xrx   xry  xrz   xx   xy   xz                                 \\
    y   yrx   yry  yrz   yx   yy   yz                                 \\
    z   zrx   zry  zrz   zx   zy   zz                                 \\
    where x, y, z are translations in meters, and rx, ry, rz are rotations around
    the x, y and z axes in radians.                                   \\
    The matrix is symmetric, so, for example, xy = yx.                \\
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    MATRIX_FIELD_NUMBER: builtins.int
    YAW_VARIANCE_FIELD_NUMBER: builtins.int
    COV_XX_FIELD_NUMBER: builtins.int
    COV_XY_FIELD_NUMBER: builtins.int
    COV_XZ_FIELD_NUMBER: builtins.int
    COV_YX_FIELD_NUMBER: builtins.int
    COV_YY_FIELD_NUMBER: builtins.int
    COV_YZ_FIELD_NUMBER: builtins.int
    COV_ZX_FIELD_NUMBER: builtins.int
    COV_ZY_FIELD_NUMBER: builtins.int
    COV_ZZ_FIELD_NUMBER: builtins.int
    @property
    def matrix(self) -> global___Matrix:
        """Row-major order representation of the covariance matrix."""
        pass
    yaw_variance: builtins.float
    """Variance of the yaw component of the SE3 Pose.
    Warning: deprecated in 2.1. This should equal cov_rzrz, inside `matrix`.
    """

    cov_xx: builtins.float
    """Warning: deprecated in 2.1. Use 'matrix.'"""

    cov_xy: builtins.float
    """Warning: deprecated in 2.1. Use 'matrix.'"""

    cov_xz: builtins.float
    """Warning: deprecated in 2.1. Use 'matrix.'"""

    cov_yx: builtins.float
    """Warning: deprecated in 2.1. Use 'matrix.'"""

    cov_yy: builtins.float
    """Warning: deprecated in 2.1. Use 'matrix.'"""

    cov_yz: builtins.float
    """Warning: deprecated in 2.1. Use 'matrix.'"""

    cov_zx: builtins.float
    """Warning: deprecated in 2.1. Use 'matrix.'"""

    cov_zy: builtins.float
    """Warning: deprecated in 2.1. Use 'matrix.'"""

    cov_zz: builtins.float
    """Warning: deprecated in 2.1. Use 'matrix.'"""

    def __init__(self,
        *,
        matrix: typing.Optional[global___Matrix] = ...,
        yaw_variance: builtins.float = ...,
        cov_xx: builtins.float = ...,
        cov_xy: builtins.float = ...,
        cov_xz: builtins.float = ...,
        cov_yx: builtins.float = ...,
        cov_yy: builtins.float = ...,
        cov_yz: builtins.float = ...,
        cov_zx: builtins.float = ...,
        cov_zy: builtins.float = ...,
        cov_zz: builtins.float = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["matrix",b"matrix"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cov_xx",b"cov_xx","cov_xy",b"cov_xy","cov_xz",b"cov_xz","cov_yx",b"cov_yx","cov_yy",b"cov_yy","cov_yz",b"cov_yz","cov_zx",b"cov_zx","cov_zy",b"cov_zy","cov_zz",b"cov_zz","matrix",b"matrix","yaw_variance",b"yaw_variance"]) -> None: ...
global___SE3Covariance = SE3Covariance

class PolyLine(google.protobuf.message.Message):
    """Multi-part, 1D line segments defined by a series of points."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    POINTS_FIELD_NUMBER: builtins.int
    @property
    def points(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Vec2]: ...
    def __init__(self,
        *,
        points: typing.Optional[typing.Iterable[global___Vec2]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["points",b"points"]) -> None: ...
global___PolyLine = PolyLine

class Polygon(google.protobuf.message.Message):
    """Polygon in the XY plane.
    May be concave, but should not self-intersect. Vertices can be specified in either
    clockwise or counterclockwise orders.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    VERTEXES_FIELD_NUMBER: builtins.int
    @property
    def vertexes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Vec2]: ...
    def __init__(self,
        *,
        vertexes: typing.Optional[typing.Iterable[global___Vec2]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["vertexes",b"vertexes"]) -> None: ...
global___Polygon = Polygon

class PolygonWithExclusions(google.protobuf.message.Message):
    """Represents a region in the XY plane that consists of a single polygon
    from which polygons representing exclusion areas may be subtracted.

    A point is considered to be inside the region if it is inside the inclusion
    polygon and not inside any of the exclusion polygons.

    Note that while this can be used to represent a polygon with holes, that
    exclusions are not necessarily holes:  An exclusion polygon may not be
    completely inside the inclusion polygon.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    INCLUSION_FIELD_NUMBER: builtins.int
    EXCLUSIONS_FIELD_NUMBER: builtins.int
    @property
    def inclusion(self) -> global___Polygon: ...
    @property
    def exclusions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Polygon]: ...
    def __init__(self,
        *,
        inclusion: typing.Optional[global___Polygon] = ...,
        exclusions: typing.Optional[typing.Iterable[global___Polygon]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["inclusion",b"inclusion"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["exclusions",b"exclusions","inclusion",b"inclusion"]) -> None: ...
global___PolygonWithExclusions = PolygonWithExclusions

class Circle(google.protobuf.message.Message):
    """Represents a circular 2D area."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CENTER_PT_FIELD_NUMBER: builtins.int
    RADIUS_FIELD_NUMBER: builtins.int
    @property
    def center_pt(self) -> global___Vec2: ...
    radius: builtins.float
    """Dimensions in m from center_pt."""

    def __init__(self,
        *,
        center_pt: typing.Optional[global___Vec2] = ...,
        radius: builtins.float = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["center_pt",b"center_pt"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["center_pt",b"center_pt","radius",b"radius"]) -> None: ...
global___Circle = Circle

class Area(google.protobuf.message.Message):
    """Represents an area in the XY plane."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    POLYGON_FIELD_NUMBER: builtins.int
    CIRCLE_FIELD_NUMBER: builtins.int
    @property
    def polygon(self) -> global___Polygon: ...
    @property
    def circle(self) -> global___Circle: ...
    def __init__(self,
        *,
        polygon: typing.Optional[global___Polygon] = ...,
        circle: typing.Optional[global___Circle] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["circle",b"circle","geometry",b"geometry","polygon",b"polygon"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["circle",b"circle","geometry",b"geometry","polygon",b"polygon"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["geometry",b"geometry"]) -> typing.Optional[typing_extensions.Literal["polygon","circle"]]: ...
global___Area = Area

class Volume(google.protobuf.message.Message):
    """Represents a volume of space in an unspecified frame."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    BOX_FIELD_NUMBER: builtins.int
    @property
    def box(self) -> global___Vec3:
        """Dimensions in m, centered on frame origin."""
        pass
    def __init__(self,
        *,
        box: typing.Optional[global___Vec3] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["box",b"box","geometry",b"geometry"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["box",b"box","geometry",b"geometry"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["geometry",b"geometry"]) -> typing.Optional[typing_extensions.Literal["box"]]: ...
global___Volume = Volume

class Bounds(google.protobuf.message.Message):
    """Represents bounds on a value, such that lower < value < upper.
    If you do not want to specify one side of the bound, set it to
    an appropriately large (or small) number.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    LOWER_FIELD_NUMBER: builtins.int
    UPPER_FIELD_NUMBER: builtins.int
    lower: builtins.float
    upper: builtins.float
    def __init__(self,
        *,
        lower: builtins.float = ...,
        upper: builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["lower",b"lower","upper",b"upper"]) -> None: ...
global___Bounds = Bounds

class Vec2Value(google.protobuf.message.Message):
    """A 2D vector of doubles that uses wrapped values so we can tell which elements are set."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    X_FIELD_NUMBER: builtins.int
    Y_FIELD_NUMBER: builtins.int
    @property
    def x(self) -> google.protobuf.wrappers_pb2.DoubleValue: ...
    @property
    def y(self) -> google.protobuf.wrappers_pb2.DoubleValue: ...
    def __init__(self,
        *,
        x: typing.Optional[google.protobuf.wrappers_pb2.DoubleValue] = ...,
        y: typing.Optional[google.protobuf.wrappers_pb2.DoubleValue] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["x",b"x","y",b"y"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["x",b"x","y",b"y"]) -> None: ...
global___Vec2Value = Vec2Value

class Vec3Value(google.protobuf.message.Message):
    """A 3D vector of doubles that uses wrapped values so we can tell which elements are set."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    X_FIELD_NUMBER: builtins.int
    Y_FIELD_NUMBER: builtins.int
    Z_FIELD_NUMBER: builtins.int
    @property
    def x(self) -> google.protobuf.wrappers_pb2.DoubleValue: ...
    @property
    def y(self) -> google.protobuf.wrappers_pb2.DoubleValue: ...
    @property
    def z(self) -> google.protobuf.wrappers_pb2.DoubleValue: ...
    def __init__(self,
        *,
        x: typing.Optional[google.protobuf.wrappers_pb2.DoubleValue] = ...,
        y: typing.Optional[google.protobuf.wrappers_pb2.DoubleValue] = ...,
        z: typing.Optional[google.protobuf.wrappers_pb2.DoubleValue] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["x",b"x","y",b"y","z",b"z"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["x",b"x","y",b"y","z",b"z"]) -> None: ...
global___Vec3Value = Vec3Value
