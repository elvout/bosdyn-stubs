"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import bosdyn.api.basic_command_pb2
import bosdyn.api.trajectory_pb2
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.wrappers_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class GripperCommand(google.protobuf.message.Message):
    """The synchronized command message for commanding the gripper to move.
    A synchronized commands is one of the possible robot command messages for controlling the robot.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class Request(google.protobuf.message.Message):
        """The gripper request must be one of the basic command primitives."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        CLAW_GRIPPER_COMMAND_FIELD_NUMBER: builtins.int
        @property
        def claw_gripper_command(self) -> global___ClawGripperCommand.Request:
            """Control opening and closing the gripper."""
            pass
        def __init__(self,
            *,
            claw_gripper_command: typing.Optional[global___ClawGripperCommand.Request] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["claw_gripper_command",b"claw_gripper_command","command",b"command"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["claw_gripper_command",b"claw_gripper_command","command",b"command"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["command",b"command"]) -> typing.Optional[typing_extensions.Literal["claw_gripper_command"]]: ...

    class Feedback(google.protobuf.message.Message):
        """The feedback for the gripper command that will provide information on the progress
        of the command.
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        CLAW_GRIPPER_FEEDBACK_FIELD_NUMBER: builtins.int
        STATUS_FIELD_NUMBER: builtins.int
        @property
        def claw_gripper_feedback(self) -> global___ClawGripperCommand.Feedback:
            """Feedback for the claw gripper command."""
            pass
        status: bosdyn.api.basic_command_pb2.RobotCommandFeedbackStatus.Status.ValueType
        def __init__(self,
            *,
            claw_gripper_feedback: typing.Optional[global___ClawGripperCommand.Feedback] = ...,
            status: bosdyn.api.basic_command_pb2.RobotCommandFeedbackStatus.Status.ValueType = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["claw_gripper_feedback",b"claw_gripper_feedback","command",b"command"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["claw_gripper_feedback",b"claw_gripper_feedback","command",b"command","status",b"status"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["command",b"command"]) -> typing.Optional[typing_extensions.Literal["claw_gripper_feedback"]]: ...

    def __init__(self,
        ) -> None: ...
global___GripperCommand = GripperCommand

class ClawGripperCommand(google.protobuf.message.Message):
    """Command to open and close the gripper."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class Request(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        TRAJECTORY_FIELD_NUMBER: builtins.int
        MAXIMUM_OPEN_CLOSE_VELOCITY_FIELD_NUMBER: builtins.int
        MAXIMUM_OPEN_CLOSE_ACCELERATION_FIELD_NUMBER: builtins.int
        MAXIMUM_TORQUE_FIELD_NUMBER: builtins.int
        DISABLE_FORCE_ON_CONTACT_FIELD_NUMBER: builtins.int
        @property
        def trajectory(self) -> bosdyn.api.trajectory_pb2.ScalarTrajectory:
            """Scalar trajectory for opening/closing the gripper. If 1 point is specified
            with no end time, we will execute a minimum time trajectory that observes
            velocity and acceleration constraints. Otherwise, we will use piecewise
            cubic interpolation, meaning there will be a cubic polynomial between each
            trajectory point, with continuous position and velocity at each trajectory
            point. If the requested trajectory violates the velocity or acceleration
            constraints below, a trajectory that is as close as possible but still
            obeys the constraints will be executed instead.
            position is radians: 0 is fully closed -1.5708 (-90 degrees) is fully open
            velocity is radians / sec.
            """
            pass
        @property
        def maximum_open_close_velocity(self) -> google.protobuf.wrappers_pb2.DoubleValue:
            """If specified, the gripper will not exceed these velocity and acceleration
            magnitudes. Note that if a minimum time trajectory is requested, we will
            accelerate and decelerate at maximum_open_close_acceleration, and coast at
            maximum_open_close_velocity.

            If unspecified, a default value of 10 (rad/s) will be used.
            """
            pass
        @property
        def maximum_open_close_acceleration(self) -> google.protobuf.wrappers_pb2.DoubleValue:
            """If unspecified, a default value of 40 (rad/s/s) will be used."""
            pass
        @property
        def maximum_torque(self) -> google.protobuf.wrappers_pb2.DoubleValue:
            """Maximum torque applied. If unspecified, a default value of 5.5 (Nm) will be used."""
            pass
        disable_force_on_contact: builtins.bool
        """By default the gripper transitions to force control when it detects an object closing.
        Setting this field to true disables the transition to force control on contact detection
        and always keeps the gripper in position control.
        """

        def __init__(self,
            *,
            trajectory: typing.Optional[bosdyn.api.trajectory_pb2.ScalarTrajectory] = ...,
            maximum_open_close_velocity: typing.Optional[google.protobuf.wrappers_pb2.DoubleValue] = ...,
            maximum_open_close_acceleration: typing.Optional[google.protobuf.wrappers_pb2.DoubleValue] = ...,
            maximum_torque: typing.Optional[google.protobuf.wrappers_pb2.DoubleValue] = ...,
            disable_force_on_contact: builtins.bool = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["maximum_open_close_acceleration",b"maximum_open_close_acceleration","maximum_open_close_velocity",b"maximum_open_close_velocity","maximum_torque",b"maximum_torque","trajectory",b"trajectory"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["disable_force_on_contact",b"disable_force_on_contact","maximum_open_close_acceleration",b"maximum_open_close_acceleration","maximum_open_close_velocity",b"maximum_open_close_velocity","maximum_torque",b"maximum_torque","trajectory",b"trajectory"]) -> None: ...

    class Feedback(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        class _Status:
            ValueType = typing.NewType('ValueType', builtins.int)
            V: typing_extensions.TypeAlias = ValueType
        class _StatusEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[ClawGripperCommand.Feedback._Status.ValueType], builtins.type):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
            STATUS_UNKNOWN: ClawGripperCommand.Feedback._Status.ValueType  # 0
            """STATUS_UNKNOWN should never be used. If used, an internal error has happened."""

            STATUS_IN_PROGRESS: ClawGripperCommand.Feedback._Status.ValueType  # 1
            """The gripper is opening or closing."""

            STATUS_AT_GOAL: ClawGripperCommand.Feedback._Status.ValueType  # 2
            """The gripper is at the final point of the trajectory."""

            STATUS_APPLYING_FORCE: ClawGripperCommand.Feedback._Status.ValueType  # 3
            """During a close, detected contact and transitioned to force control."""

        class Status(_Status, metaclass=_StatusEnumTypeWrapper):
            pass

        STATUS_UNKNOWN: ClawGripperCommand.Feedback.Status.ValueType  # 0
        """STATUS_UNKNOWN should never be used. If used, an internal error has happened."""

        STATUS_IN_PROGRESS: ClawGripperCommand.Feedback.Status.ValueType  # 1
        """The gripper is opening or closing."""

        STATUS_AT_GOAL: ClawGripperCommand.Feedback.Status.ValueType  # 2
        """The gripper is at the final point of the trajectory."""

        STATUS_APPLYING_FORCE: ClawGripperCommand.Feedback.Status.ValueType  # 3
        """During a close, detected contact and transitioned to force control."""


        STATUS_FIELD_NUMBER: builtins.int
        status: global___ClawGripperCommand.Feedback.Status.ValueType
        """Current status of the command."""

        def __init__(self,
            *,
            status: global___ClawGripperCommand.Feedback.Status.ValueType = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["status",b"status"]) -> None: ...

    def __init__(self,
        ) -> None: ...
global___ClawGripperCommand = ClawGripperCommand
